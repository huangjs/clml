-*- outline -*-

* RTT
あるルータに対して ping を打ちそれが戻ってくるまでの時間を RTT と呼ぶことに
します。いくつかのルータに対し、300 秒間隔で 7746 回 RTT を採取したデータを
分析対象とします。

TS-STAT: (setq rtt (time-series-data
                    (read-data-from-file "sample/rrdback-hama-rtt-1000.csv"
                                         :type :csv
                                         :csv-type-spec (cons 'integer (make-list 1000 :initial-element 'float)))
                    :except '(0)))
#<TIME-SERIES-DATASET>
DIMENSIONS: RTT_1 | RTT_2 | RTT_3 | RTT_4 | RTT_5 | RTT_6 | ...
TYPES:      NUMERIC | NUMERIC | NUMERIC | NUMERIC | NUMERIC | ...
FREQUENCY: 1
START:     (1 1)
END:       (7746 1)
POINTS:    7746

RTT_* は各ルータの RTT を表しており、1000 個のルータの RTT データを時系列データ
として読み込みました。このデータには特に周期性は定義されていないので、FREQUENCY 
は 1 となっています。
** RTT_1
一個目のルータ RTT_1 について見てみます。

TS-STAT: (draw (sub-ts rtt :end 1000 :range '(0)))

関数 sub-ts によって時系列データを部分に限定できます。:end 1000 で 1000 回目の
データ採取まで、:range '(0) で 1 個目のルータ、に限定しています。
このグラフを見るとかなり変動は激しく、法則を見出すのは困難です。

一般に時系列データを解析する際に、非定常なデータ（時間によって、統計的特徴たとえば平均
などが変化するデータ）をある程度定常的にするための前処理として、対数変換・差分・同期比
・移動平均などがあります。
*** ma
RTT_1 のような一見して変動の激しいデータは、移動平均によって滑らかにすることで全体的
な増減の傾向が分かることがあります。
移動平均とは、ある時間におけるデータの値をその前後一定範囲の値の平均として決めるもの
です。よってある時間「付近」でデータが総じて大きい値であれば、その時点での値がたまた
ま小さかったとしても、移動平均値は大きくなります。結果として、あらかじめ決めた一定範
囲の幅に応じた期間でのデータの動きを見ることができます。

関数 ma によって移動平均を求めることができ、:k で平均をとる範囲の半径を指定します。
k として小さい値を指定すれば短期間の動き、大きい値を指定すれば長期間の動きに注目す
ることになります。 

RTT_1 は約 7700 のデータですので、 
k = 5, 20, 100, 500, 1000 まででそれぞれ移動平均を求めてみると

TS-STAT: (draw (ma (sub-ts rtt :range '(0)) :k 5))
TS-STAT: (draw (ma (sub-ts rtt :range '(0)) :k 20))
TS-STAT: (draw (ma (sub-ts rtt :range '(0)) :k 100))
TS-STAT: (draw (ma (sub-ts rtt :range '(0)) :k 500))
TS-STAT: (draw (ma (sub-ts rtt :range '(0)) :k 1000))

k = 1000 以外のグラフでは、一定間隔での増減の繰り返しが見られ、その間隔もほぼ同様で
300 弱となっています。
一般的には k を大きくしていくと、長期間での動きによる影響が現れ、k に比して短い期間
での動きは滑らかになります。上記の結果を見ても、k が増えるごとに、300 弱の間隔の増減
に関してはだんだん滑らかになっていき、k = 1000 ではほとんど見ることができません。

よって RTT_1 には 300 弱の周期性があると予想されます。
*** acf
時系列データに周期性がある場合、基本的な統計量である自己共分散・自己相関・ピリオドグ
ラムなどにそれを見ることができます。
関数 acf によって、自己相関を求めることができます。自己相関とは対象の時系列データ
と、そのデータ自身の時間をずらした時系列データとの相関係数を見るもので、acf では
:max-k でどこまで時間をずらすかを指定できます。
移動平均グラフから周期はだいたい 300 弱と予想されますので、その 2 倍ぐらいま
で :max-k 600 として、原データおよび周期性を予想する元となった k = 20 の移動平均デ
ータの自己相関を見てみますと、

TS-STAT: (acf (sub-ts rtt :range '(0)) :max-k 600 :print t)
RTT_1
RTT_1
1.000 (0.000)
0.181 (1.000)
0.174 (2.000)
0.152 (3.000)
0.160 (4.000)
0.139 (5.000)
0.164 (6.000)
0.157 (7.000)
0.138 (8.000)
0.141 (9.000)
0.128 (10.000)
...

TS-STAT: (acf (ma (sub-ts rtt :range '(0)) :k 20) :max-k 600 :print t)
RTT_1
RTT_1
1.000 (0.000)
0.998 (1.000)
0.995 (2.000)
0.992 (3.000)
0.988 (4.000)
0.983 (5.000)
0.977 (6.000)
0.971 (7.000)
0.964 (8.000)
0.957 (9.000)
0.949 (10.000)
...

:print t とすることで、グラフだけでなく、自己相関係数の値を具体的に見ることができます。
グラフと print された値を見ると、原データ・移動平均データともに、lag 288 ごとに高い値
を示しており、周期 288 と考えることができます。
この時系列データの一行一行は 300 秒間隔ですので、周期は

TS-STAT: (/ (* 288 300) (* 60 60))
24

24 時間、1 日と考えられます。
** RTT_*
*** ccf
いま RTT_1 の周期は判明したので、ほかのルータとの関係も見てみたいところです。
時系列データにおける各変量間の関係を見る手法として、相互共分散・相互相関が代表的です。

相互相関は関数 ccf によって求められます。
相互相関とは二つの変量間に定まる値で、一つの変量ともう片方の変量の時間をずらしたもの
との相関係数です。ccf では acf と同様に :max-k でどこまでずらすかを指定できます。
RTT_1 と RTT_2 との相互相関を求めてみると、

TS-STAT: (ccf (sub-ts rtt :range '(0)) (sub-ts rtt :range '(1)) :max-k 400 :print t)
RTT_1 : RTT_2
-0.051 (-400.000)
-0.055 (-399.000)
-0.058 (-398.000)
-0.048 (-397.000)
-0.025 (-396.000)
-0.056 (-395.000)
-0.055 (-394.000)
-0.062 (-393.000)
...

一般に、自己相関係数の値は lag の正負で対称になるので、正の lag における値を求めるだ
けで十分ですが、相互相関係数の場合はそうではないので、正負の lag における相関係数の値
を求める必要があります。よって ccf の返り値では正負の lag についてのグラフ・値を示して
います。
グラフ・値を見てみると、ほとんど左右対称で、lag 288 ごとに高い値を示しており、RTT_2 
にも RTT_1 と同様の周期がありそうです。
実際に RTT_2 の自己相関を見てみると

TS-STAT: (acf (sub-ts rtt :range '(1)) :max-k 600)

RTT_1 の自己相関グラフと非常に似た形をしており、lag 288 ごとに高い値を示しており、
周期 288 であることがわかります。
*** RTT_207
他のほとんどのルータに関しても同様の結果が得られましたが、いくつか相関が崩れている
ものもありました。たとえば RTT_207 です。 RTT_1 との相互相関および自己相関を見てみ
ますと

TS-STAT: (ccf (sub-ts rtt :range '(0)) (sub-ts rtt :range '(206)) :max-k 400)
TS-STAT: (acf (sub-ts rtt :range '(206)) :max-k 600)

相互相関のグラフには RTT_2 との間に見られたような規則性はなく、相関係数の値も 0.1 以下
と小さい値であり、明らかな相関はありません。
自己相関のグラフを見てみますと、lag > 0 に対して 0.04 以下と小さい値をとっています。
一般に自己相関係数の値が lag = 0 のとき 1, lag > 0 のとき 0 であるような波形は白色雑音
と呼ばれています。白色雑音とは簡単に言えば規則性がないノイズのことで、イメージとしては
テレビにおける砂嵐状態です。RTT_207 は白色雑音に近いと考えられます。
*** periodgram
時系列データを色々な周期成分を合成した実現値であると見たときに、どの周波数の成分がどれ
だけ強いかを解析する方法をスペクトル分析といいます。白色雑音をスペクトル分析すると、ど
の周波数の強度も同じとなります。このようなスペクトルをもった波形の光は白く見えることか
ら、白色雑音と呼ばれます。
関数 periodgram によって、周期成分の強度を一定間隔の周波数について推定することができます。
たとえば RTT_1 の periodgram を求めてみると、

TS-STAT: (periodgram (sub-ts rtt :range '(0)) :smoothing :mean :step 500 :print t)
Frequency | log P(f)
0.00195312 | 7.12615211
0.00390625 | 8.51455027
0.00585937 | 6.94596276
0.00781250 | 7.42450875
0.00976562 | 7.18761249
...

周波数 0.00390625 の周期成分の強度が顕著に高い値を示しており、この周期成分が RTT_1 に大きく
寄与していると考えられます。この周期成分の周期は

TS-STAT: (/ 0.00390625)
256.0

であり、自己相関による分析によって得た周期 288 をある程度裏付ける結果となっています。
では白色雑音に近いと考えられる RTT_207 の periodgram を見てみると

TS-STAT: (periodgram (sub-ts rtt :range '(206)) :smoothing :mean :step 500 :print t)
Frequency | log P(f)
0.00195312 | 5.73295055
0.00390625 | 5.35883883
0.00585937 | 5.47351853
0.00781250 | 5.41682403
0.00976562 | 5.55975655
0.01171875 | 5.02864223
...

RTT_1 に見られたようなピークはありません。強度の最大最小幅は約 1.5 と狭く、白色雑音の特徴
である周波数によって強度が変化しないことと一致します。
RTT_207 が白色雑音であったとすれば、207 番目のルータの ping の遅れには規則性
がない、すなわちそのルータへの負荷には規則性がないことになります。RTT_1 などのようにその
負荷が24 時間周期となれば、恐らく人間の活動と大きく関わっているルータと思われます。
逆に RTT_207 はまったく人間とは関わっていないルータ、もっと言えば実は使われていないルータ
なのではないかと推察されます。
他のルータに関しても periodgram を求め、強度の幅が 1.5 以下のものを求めたところ
以下のルータが挙がりました。ルータ名とそのルータにおける periodgram の強度の幅を
示しています。
("RTT_50" 1.4943830149695998) 
("RTT_107" 1.3112152505946226) 
("RTT_207" 1.4948992959735214) 
("RTT_220" 1.3683134884524626) 
("RTT_263" 1.4033969065851233) 
("RTT_499" 1.4836561988152996) 
("RTT_516" 1.371292080772545) 
("RTT_522" 1.4371847246967886) 
("RTT_563" 1.2986369801010644) 
("RTT_565" 1.361848999845801) 
("RTT_579" 1.3962060337329092) 
("RTT_597" 1.3358978009046725) 
("RTT_611" 1.3726322498888726) 
("RTT_627" 1.2696676479221765) 
("RTT_636" 1.3977296616519643) 
("RTT_648" 1.4188956253065168) 
("RTT_649" 1.4119158408981471) 
("RTT_655" 1.4996943930612732) 
("RTT_660" 1.3712779047203303) 
("RTT_707" 1.4414016979462811) 
("RTT_708" 1.4539262079613784) 
("RTT_713" 1.297539968851806) 
("RTT_718" 1.334375599709305) 
("RTT_726" 1.3492684906797088) 
("RTT_783" 1.3738817514271098) 
("RTT_834" 1.2590339198751974) 
("RTT_862" 1.2319259800812015) 
("RTT_875" 1.3637737286552265) 
("RTT_925" 1.4112422747354438) 
("RTT_972" 1.3212804511906215) 
