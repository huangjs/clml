;; Object doc/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "doc/"
  :tables (list 
   (semanticdb-table "colorize-lisp-examples.lisp"
    :major-mode 'lisp-mode
    :tags '(("defpackage" code nil nil [244 617]) ("in-package" code nil nil [643 665]) ("defparameter" code nil nil [667 2009]) ("*css-background-class*" variable (:default-value "lisp-bg") nil [2011 2052]) ("for-css" function (:arguments ("thing")) nil [2054 2150]) ("make-background-css" function (:arguments ("color" "&key" "class" "extra")) nil [2152 2622]) ("eval-when" code nil nil [2669 2804]) ("coloring-type" type (:members (("modes" variable nil nil nil) ("default-mode" variable nil nil nil) ("transition-functions" variable nil nil nil) ("fancy-name" variable nil nil nil) ("term-formatter" variable nil nil nil) ("formatter-initial-values" variable (:default-value "nil") nil nil) ("formatter-after-hook" variable (:default-value "(constantly \"\")") nil nil) ("autodetect-function" variable (:default-value "(constantly nil)") nil nil) ("parent-type" variable (:default-value "nil") nil nil) ("visible" variable (:default-value "t") nil nil)) :type "class") nil [2806 3825]) ("find-coloring-type" function (:arguments ("type")) nil [3827 4002]) ("autodetect-coloring-type" function (:arguments ("name")) nil [4004 4275]) ("coloring-types" function nil nil [4277 4500]) ("*scan-calls*" variable nil nil [4888 4911]) ("*reset-position*" variable nil nil [4913 4942]) ("with-gensyms" function (:arguments ("&rest" "&body" "body")) nil [4944 5116]) ("*formatter-local-variables*" variable nil nil [8550 8586]) ("define-coloring-type" function (:arguments ("name" "fancy-name" "&key" "modes" "default-mode" "transitions" "formatters" "autodetect" "parent" "formatter-variables" "formatter-after-hook" "invisible")) nil [8588 13203]) ("full-transition-table" function (:arguments ("coloring-type-object")) nil [13205 13529]) ("format-scan" function (:arguments ("coloring-type" "scan")) nil [16947 17486]) ("string-substitute" function (:arguments ("string" "substring" "replacement-string")) nil [18094 18682]) ("decode-from-tt" function (:arguments ("string")) nil [18684 18878]) ("colorize-file-to-stream" function (:arguments ("coloring-type" "input-file-name" "s2" "&key" "wrap" "css-background")) nil [19381 20772]) ("colorize-file" function (:arguments ("coloring-type" "input-file-name" "&optional" "output-file-name")) nil [20774 21436]) ("eval-when" code nil nil [21487 21584]) ("defparameter" code nil nil [21586 21694]) ("defparameter" code nil nil [21826 22139]) ("defparameter" code nil nil [22141 22199]) ("define-coloring-type" code nil nil [29162 29870]) ("define-coloring-type" code nil nil [30735 30857]) ("*c-open-parens*" variable (:default-value "([{") nil [30859 30889]) ("*c-close-parens*" variable (:default-value ")]}") nil [30890 30921]) ("*c-reserved-words*" variable (:default-value (quote ("auto" "break" "case" "char" "const" "continue" "default" "do" "double" "else" "enum" "extern" "float" "for" "goto" "if" "int" "long" "register" "return" "short" "signed" "sizeof" "static" "struct" "switch" "typedef" "union" "unsigned" "void" "volatile" "while" "__restrict" "_Bool"))) nil [30923 31291]) ("defparameter" code nil nil [31293 31388]) ("*c++-reserved-words*" variable (:default-value (quote ("asm" "auto" "bool" "break" "case" "catch" "char" "class" "const" "const_cast" "continue" "default" "delete" "do" "double" "dynamic_cast" "else" "enum" "explicit" "export" "extern" "false" "float" "for" "friend" "goto" "if" "inline" "int" "long" "mutable" "namespace" "new" "operator" "private" "protected" "public" "register" "reinterpret_cast" "return" "short" "signed" "sizeof" "static" "static_cast" "struct" "switch" "template" "this" "throw" "true" "try" "typedef" "typeid" "typename" "union" "unsigned" "using" "virtual" "void" "volatile" "wchar_t" "while"))) nil [34564 35478]) ("*java-reserved-words*" variable (:default-value (quote ("abstract" "boolean" "break" "byte" "case" "catch" "char" "class" "const" "continue" "default" "do" "double" "else" "extends" "final" "finally" "float" "for" "goto" "if" "implements" "import" "instanceof" "int" "interface" "long" "native" "new" "package" "private" "protected" "public" "return" "short" "static" "strictfp" "super" "switch" "synchronized" "this" "throw" "throws" "transient" "try" "void" "volatile" "while"))) nil [35886 36587]) ("define-coloring-type" code nil nil [36589 36871]) ("with-each-stream-line" function (:arguments ("var" "&body" "body")) nil [38930 39222]) ("strcat" function (:arguments ("&rest" "strings")) nil [39992 40062]) ("string-starts-with" function (:arguments ("start" "str")) nil [40064 40196]) ("string-append" function (:arguments ("outputstr" "&rest" "args")) nil [40198 40306]) ("defconstant" code nil nil [40308 40370]) ("texinfo->raw-lisp" function (:arguments ("code")) nil [40372 41444]) ("process-dir" function (:arguments ("dir")) nil [43585 43814]) ("progn" code nil nil [43868 43940]) ("progn" code nil nil [43949 44057]))
    :file "colorize-lisp-examples.lisp"
    :pointmax 44058
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0pre3"
  :semanticdb-version "2.0pre3"
  )
