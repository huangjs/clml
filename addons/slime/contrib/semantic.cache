;; Object contrib/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "contrib/"
  :tables (list 
   (semanticdb-table "slime-c-p-c.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("slime-parse" include nil nil [522 544]) ("slime-editing-commands" include nil nil [545 578]) ("slime-complete-symbol*" function nil nil [580 899]) ("slime-expand-abbreviations-and-complete" function nil nil [1074 2541]) ("slime-complete-symbol*-fancy-bit" function nil nil [2543 3447]) ("slime-get-arglist" function (:arguments ("symbol-name")) nil [3449 3603]) ("slime-contextual-completions" function (:arguments ("beg" "end")) nil [3605 4816]) ("slime-completions" function (:arguments ("prefix")) nil [4818 4922]) ("slime-completions-for-keyword" function (:arguments ("operator-designator" "prefix" "arg-indices")) nil [4924 5174]) ("slime-completions-for-character" function (:arguments ("prefix")) nil [5176 5282]) ("slime-complete-form" function (:user-visible-flag t) nil [5305 6270]) ("slime-c-p-c-init" function nil nil [6292 6507]) ("slime-c-p-c-on-connect" function nil nil [6509 6602]) ("slime-c-p-c-init" code nil nil [6604 6622]) ("slime-c-p-c" package nil nil [6624 6646]))
    :file "slime-c-p-c.el"
    :pointmax 6647
    :unmatched-syntax 'nil
    )
   (semanticdb-table "slime-autodoc.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("slime-parse" include nil nil [527 549]) ("slime-use-autodoc-mode" variable (:default-value t) nil [551 649]) ("slime-fontify-string" function (:arguments ("string")) nil [651 1354]) ("slime-arglist" function (:user-visible-flag t :arguments ("name")) nil [1356 1690]) ("slime-autodoc-mode" variable (:user-visible-flag t) nil [1745 1849]) ("slime-autodoc-cache-type" variable (:user-visible-flag t :default-value (quote last)) nil [1851 2224]) ("slime-autodoc-cache" variable nil nil [2226 2368]) ("slime-autodoc-mode" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [2370 2850]) ("slime-autodoc-last-message" variable nil nil [2852 2890]) ("slime-autodoc" function nil nil [2892 3544]) ("slime-autodoc-use-multiline-p" variable nil nil [3546 3700]) ("slime-autodoc-message-function" variable (:default-value (quote slime-autodoc-show-message)) nil [3702 3769]) ("slime-autodoc-message" function (:arguments ("doc")) nil [3771 3903]) ("slime-autodoc-show-message" function (:arguments ("doc")) nil [3905 4083]) ("slime-autodoc-message-dimensions" function nil nil [4085 4510]) ("slime-autodoc-pre-command-refresh-echo-area" function nil nil [4512 4748]) ("slime-autodoc-thing-at-point" function nil nil [4750 5846]) ("slime-autodoc-global-at-point" function nil nil [5848 6041]) ("slime-global-variable-name-regexp" variable (:default-value "^\\(.*:\\)?\\([*+]\\).+\\2$") nil [6043 6274]) ("slime-global-variable-name-p" function (:arguments ("name")) nil [6276 6535]) ("slime-get-cached-autodoc" function (:arguments ("symbol-name")) nil [6537 6911]) ("slime-update-autodoc-cache" function (:arguments ("symbol-name" "documentation")) nil [6913 7281]) ("slime-autodoc-idle-timer" variable nil nil [7324 7406]) ("slime-autodoc-delay" variable (:user-visible-flag t :default-value 0.2) nil [7408 7514]) ("slime-autodoc-start-timer" function (:user-visible-flag t) nil [7516 7887]) ("slime-autodoc-stop-timer" function nil nil [7889 8121]) ("slime-autodoc-timer-hook" function nil nil [8123 8525]) ("slime-autodoc-message-ok-p" function nil nil [8527 9116]) ("slime-autodoc-init" function nil nil [9140 9397]) ("slime-autodoc-on-connect" function nil nil [9399 9494]) ("slime-autodoc-maybe-enable" function nil nil [9496 9593]) ("slime-autodoc-unload" function nil nil [9595 9865]) ("slime-autodoc" package nil nil [9867 9891]))
    :file "slime-autodoc.el"
    :pointmax 9892
    :unmatched-syntax 'nil
    )
   (semanticdb-table "slime-editing-commands.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("slime-beginning-of-defun" function nil nil [558 764]) ("slime-end-of-defun" function nil nil [766 950]) ("slime-comment-start-regexp" variable (:default-value "\\(\\(^\\|[^
\\\\]\\)\\([\\\\][\\\\]\\)*\\);+[ 	]*") nil [952 1088]) ("slime-beginning-of-comment" function nil nil [1090 1487]) ("slime-close-all-parens-in-sexp" function (:user-visible-flag t :arguments ("&optional" "region")) nil [1489 3392]) ("slime-close-parens-limit" variable nil nil [3394 3571]) ("slime-insert-balanced-comments" function (:user-visible-flag t :arguments ("arg")) nil [3573 4483]) ("slime-remove-balanced-comments" function (:user-visible-flag t) nil [4485 4798]) ("slime-reindent-defun" function (:user-visible-flag t :arguments ("&optional" "force-text-fill")) nil [5742 7068]) ("slime-editing-commands-init" function nil nil [7070 7299]) ("slime-editing-commands" package nil nil [7301 7334]))
    :file "slime-editing-commands.el"
    :pointmax 7335
    :unmatched-syntax 'nil
    )
   (semanticdb-table "slime-fancy.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("slime-autodoc" include nil nil [691 715]) ("slime-autodoc-init" code nil nil [716 736]) ("slime-c-p-c" include nil nil [920 942]) ("slime-c-p-c-init" code nil nil [943 961]) ("slime-editing-commands" include nil nil [1029 1062]) ("slime-editing-commands-init" code nil nil [1063 1092]) ("slime-fancy-inspector" include nil nil [1126 1158]) ("slime-fancy-inspector-init" code nil nil [1159 1187]) ("slime-fuzzy" include nil nil [1308 1330]) ("slime-fuzzy-init" code nil nil [1331 1349]) ("slime-presentations" include nil nil [1592 1622]) ("slime-presentations-init" code nil nil [1623 1649]) ("slime-scratch" include nil nil [1824 1848]) ("slime-scratch-init" code nil nil [1849 1869]) ("when" code nil nil [2060 2129]) ("slime-references" include nil nil [2195 2222]) ("slime-references-init" code nil nil [2223 2246]) ("slime-fancy" package nil nil [2248 2270]))
    :file "slime-fancy.el"
    :pointmax 2271
    :unmatched-syntax 'nil
    )
   (semanticdb-table "slime-presentations.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("slime-repl-output-mouseover-face" variable (:default-value (if (featurep (quote xemacs)) (quote ((t (:bold t)))) (if (slime-face-inheritance-possible-p) (quote ((t (:box (:line-width 1 :color "black" :style released-button) :inherit slime-repl-inputed-output-face)))) (quote ((t (:box (:line-width 1 :color "black")))))))) nil [424 869]) ("slime-repl-inputed-output-face" variable (:default-value (quote ((((class color) (background light)) (:foreground "Red")) (((class color) (background dark)) (:foreground "Red")) (t (:slant italic))))) nil [871 1138]) ("when" code nil nil [1242 1473]) ("make-variable-buffer-local" code nil nil [1475 1565]) ("slime-mark-presentation-start" function (:arguments ("id" "&optional" "target")) nil [1567 2035]) ("slime-mark-presentation-start-handler" function (:arguments ("process" "string")) nil [2037 2326]) ("slime-mark-presentation-end" function (:arguments ("id" "&optional" "target")) nil [2328 2948]) ("slime-mark-presentation-end-handler" function (:arguments ("process" "string")) nil [2950 3235]) ("slime-presentation" type (:members ("text" "id") :type "struct") nil [3237 3275]) ("slime-presentation-syntax-table" variable (:default-value (let ((table (copy-syntax-table lisp-mode-syntax-table))) (modify-syntax-entry 60 "(>" table) (modify-syntax-entry 62 ")<" table) table)) nil [3277 3831]) ("slime-add-presentation-properties" function (:arguments ("start" "end" "id" "result-p")) nil [3833 5808]) ("slime-ensure-presentation-overlay" function (:arguments ("start" "end" "presentation")) nil [5810 6588]) ("slime-remove-presentation-properties" function (:arguments ("from" "to" "presentation")) nil [6592 7268]) ("slime-insert-presentation" function (:arguments ("string" "output-id" "&optional" "rectangle")) nil [7270 7791]) ("slime-presentation-whole-p" function (:arguments ("presentation" "start" "end" "&optional" "object")) nil [7793 8190]) ("slime-presentations-around-point" function (:arguments ("point" "&optional" "object")) nil [8192 8449]) ("slime-presentation-start-p" function (:arguments ("tag")) nil [8451 8529]) ("slime-presentation-stop-p" function (:arguments ("tag")) nil [8531 8606]) ("slime-presentation-start" function (:arguments ("point" "presentation" "&optional" "object")) nil [8608 9656]) ("slime-presentation-end" function (:arguments ("point" "presentation" "&optional" "object")) nil [9658 11064]) ("slime-presentation-bounds" function (:arguments ("point" "presentation" "&optional" "object")) nil [11066 11718]) ("slime-presentation-around-point" function (:arguments ("point" "&optional" "object")) nil [11720 12523]) ("slime-presentation-around-or-before-point" function (:arguments ("point" "&optional" "object")) nil [12525 12895]) ("slime-for-each-presentation-in-region" function (:arguments ("from" "to" "function" "&optional" "object")) nil [12897 14115]) ("unless" code nil nil [14227 14446]) ("slime-after-change-function" function (:arguments ("start" "end" "&rest" "ignore")) nil [14448 15300]) ("slime-presentation-around-click" function (:arguments ("event")) nil [15302 16129]) ("slime-copy-or-inspect-presentation-at-mouse" function (:arguments ("event")) nil [16141 16560]) ("slime-inspect-presentation-at-mouse" function (:arguments ("event")) nil [16562 17005]) ("slime-copy-presentation-at-mouse" function (:arguments ("event")) nil [17007 17958]) ("slime-copy-presentation-at-mouse-to-point" function (:arguments ("event")) nil [17960 18552]) ("slime-copy-presentation-at-mouse-to-kill-ring" function (:arguments ("event")) nil [18554 18888]) ("slime-describe-presentation-at-mouse" function (:arguments ("event")) nil [18892 19184]) ("slime-pretty-print-presentation-at-mouse" function (:arguments ("event")) nil [19186 19494]) ("slime-presentation-map" variable (:default-value (make-sparse-keymap)) nil [19496 19548]) ("define-key" code nil nil [19550 19641]) ("define-key" code nil nil [19642 19713]) ("when" code nil nil [19715 19908]) ("slime-menu-choices-for-presentation" function (:arguments ("presentation" "buffer" "from" "to" "choice-to-lambda")) nil [20140 22116]) ("slime-presentation-menu" function (:arguments ("event")) nil [22118 22936]) ("slime-presentation-expression" function (:arguments ("presentation")) nil [22938 23394]) ("slime-buffer-substring-with-reified-output" function (:arguments ("start" "end")) nil [23396 23627]) ("slime-reify-old-output" function (:arguments ("str-props" "str-no-props")) nil [23629 24398]) ("slime-repl-grab-old-output" function (:arguments ("replace")) nil [24402 25148]) ("slime-dispatch-presentation-event" function (:arguments ("event")) nil [25195 25483]) ("slime-presentation-write" function (:arguments ("string" "&optional" "target")) nil [25485 27030]) ("slime-presentation-current-input" function (:arguments ("&optional" "until-point-p")) nil [27032 27643]) ("slime-presentation-on-return-pressed" function nil nil [27648 27908]) ("slime-presentation-on-stream-open" function (:arguments ("stream")) nil [27910 28322]) ("slime-clear-presentations" function nil nil [28324 28409]) ("slime-presentations-init" function nil nil [28431 29226]) ("slime-install-presentations" function nil nil [29228 29331]) ("slime-presentations-init" code nil nil [29333 29359]) ("slime-presentations" package nil nil [29361 29391]))
    :file "slime-presentations.el"
    :pointmax 29392
    )
   (semanticdb-table "inferior-slime.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("define-minor-mode" code nil nil [437 808]) ("add-to-list" code nil nil [810 924]) ("inferior-slime-return" function (:user-visible-flag t) nil [926 1327]) ("inferior-slime-indent-line" function (:user-visible-flag t) nil [1329 1786]) ("inferior-slime-input-complete-p" function nil nil [1788 2018]) ("inferior-slime-closing-return" function (:user-visible-flag t) nil [2020 2412]) ("inferior-slime-init-keymap" function nil nil [2414 3030]) ("inferior-slime-init-keymap" code nil nil [3032 3060]) ("inferior-slime" package nil nil [3062 3087]))
    :file "inferior-slime.el"
    :pointmax 3088
    )
   (semanticdb-table "slime-asdf.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("slime-load-system" function (:user-visible-flag t :arguments ("&optional" "system")) nil [525 786]) ("slime-system-history" variable nil nil [788 861]) ("slime-read-system-name" function (:arguments ("&optional" "prompt" "initial-value")) nil [863 1356]) ("slime-find-asd" function (:arguments ("system-names")) nil [1358 2054]) ("slime-oos" function (:arguments ("system" "operation" "&rest" "keyword-args")) nil [2056 2474]) ("defslime-repl-shortcut" code nil nil [2476 2726]) ("defslime-repl-shortcut" code nil nil [2728 2967]) ("defslime-repl-shortcut" code nil nil [2969 3235]) ("defslime-repl-shortcut" code nil nil [3237 3476]) ("defslime-repl-shortcut" code nil nil [3478 3720]) ("defslime-repl-shortcut" code nil nil [3722 3992]) ("slime-asdf-on-connect" function nil nil [3994 4082]) ("slime-asdf-init" function nil nil [4084 4168]) ("slime-asdf-unload" function nil nil [4170 4259]) ("slime-asdf" package nil nil [4261 4282]))
    :file "slime-asdf.el"
    :pointmax 4283
    :unmatched-syntax 'nil
    )
   (semanticdb-table "slime-banner.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("slime-startup-animation" variable (:default-value (fboundp (quote animate-string))) nil [399 585]) ("slime-header-line-p" variable (:default-value (boundp (quote header-line-format))) nil [587 741]) ("slime-startup-message" function nil nil [743 1293]) ("slime-banner-init" function nil nil [1295 1382]) ("slime-banner-unload" function nil nil [1384 1476]) ("slime-banner" package nil nil [1478 1501]))
    :file "slime-banner.el"
    :pointmax 1502
    :unmatched-syntax 'nil
    )
   (semanticdb-table "slime-typeout-frame.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("slime-typeout-window" variable nil nil [511 576]) ("slime-typeout-frame-properties" variable (:default-value (quote ((height . 10) (minibuffer)))) nil [578 714]) ("slime-typeout-active-p" function nil nil [716 822]) ("slime-typeout-message" function (:arguments ("format-string" "&rest" "format-args")) nil [824 1054]) ("slime-make-typeout-frame" function (:user-visible-flag t) nil [1056 1403]) ("slime-ensure-typeout-frame" function (:user-visible-flag t) nil [1405 1580]) ("slime-typeout-autodoc-message" function (:arguments ("doc")) nil [1582 1724]) ("slime-typeout-frame-unbind-stack" variable nil nil [1748 1792]) ("slime-typeout-frame-init" function nil nil [1794 2150]) ("slime-typeout-frame-init-var" function (:arguments ("var" "value")) nil [2152 2324]) ("slime-typeout-frame-unload" function nil nil [2326 2568]) ("slime-typeout-frame" package nil nil [2572 2602]))
    :file "slime-typeout-frame.el"
    :pointmax 2603
    :unmatched-syntax 'nil
    )
   (semanticdb-table "slime-fancy-inspector.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("slime-install-fancy-inspector" function nil nil [424 608]) ("slime-deinstall-fancy-inspector" function nil nil [610 705]) ("slime-fancy-inspector-init" function nil nil [707 810]) ("slime-fancy-inspector-unload" function nil nil [812 920]) ("slime-fancy-inspector" package nil nil [922 954]))
    :file "slime-fancy-inspector.el"
    :pointmax 954
    )
   (semanticdb-table "bridge.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("cl" include nil nil [2910 2923]) ("bridge-hook" variable nil nil [2941 3025]) ("bridge-start-regexp" variable (:user-visible-flag t :default-value "") nil [3027 3227]) ("bridge-end-regexp" variable (:user-visible-flag t :default-value "") nil [3229 3339]) ("bridge-prompt-regexp" variable (:user-visible-flag t) nil [3341 3558]) ("bridge-handlers" variable nil nil [3560 3821]) ("bridge-source-insert" variable (:user-visible-flag t :default-value t) nil [3823 3923]) ("bridge-destination-insert" variable (:user-visible-flag t :default-value t) nil [3925 4061]) ("bridge-chunk-size" variable (:user-visible-flag t :default-value 512) nil [4063 4242]) ("bridge-old-filter" variable nil nil [4267 4342]) ("bridge-string" variable nil nil [4344 4417]) ("bridge-in-progress" variable nil nil [4419 4542]) ("bridge-leftovers" variable nil nil [4544 4714]) ("bridge-send-to-buffer" variable nil nil [4716 4928]) ("bridge-last-failure" variable nil nil [4930 5156]) ("bridge-insert" function (:arguments ("output")) nil [5172 5928]) ("bridge-call-handler" function (:arguments ("handler" "proc" "string")) nil [6629 7233]) ("bridge-send-handler" function (:arguments ("process" "input")) nil [7248 8714]) ("bridge-filter" function (:arguments ("process" "output")) nil [8727 14143]) ("install-bridge" function (:user-visible-flag t) nil [14160 15539]) ("reset-bridge" function (:user-visible-flag t) nil [15552 15904]) ("remove-bridge" function (:user-visible-flag t) nil [15910 16378]) ("hand-bridge" function (:user-visible-flag t :arguments ("start" "end")) nil [16405 17005]) ("bridge" package nil nil [17007 17024]))
    :file "bridge.el"
    :pointmax 17025
    )
   (semanticdb-table "swank-ppcre.lisp"
    :major-mode 'lisp-mode
    :tags '(("eval-when" code nil nil [207 500]) ("in-package" code nil nil [502 527]) ("ensure-list" function (:arguments ("list")) nil [529 690]) ("eat-stream" function (:arguments ("stream")) nil [692 1272]) ("with-file-content" function (:arguments ("pathname" "&body" "body")) nil [1293 1529]) ("with-file-content-replace" function (:arguments ("pathname" "&body" "body")) nil [1531 2384]) ("file-replace-all" function (:arguments ("pathname" "regex" "replacement" "&key" "preserve-case")) nil [2386 2829]) ("position2line" function (:arguments ("position" "string")) nil [3288 3475]) ("position2line-number" function (:arguments ("position" "string")) nil [3477 3756]) ("module-collect-components" function (:arguments ("type")) nil [4301 4430]) ("module-collect-components" function (:parent "module" :arguments ("obj" "type")) nil [4432 4548]) ("module-collect-components" function (:parent "list" :arguments ("obj" "type")) nil [4550 4727]) ("module-collect-components" function (:parent "component" :arguments ("obj" "type")) nil [4729 4829]) ("find-regex-grep-output" function (:arguments ("regex" "systems" "out-stream" "&optional" "rel-pathname")) nil [4834 5350]) ("find-regex-systems-to-file" function (:arguments ("regex" "systems" "output-pathname" "rel-pathname")) nil [5352 5810]) ("replace-regex-systems" function (:arguments ("regex" "replacement" "systems")) nil [5812 6317]) ("all-systems" function nil nil [6319 6529]) ("in-package" code nil nil [6568 6587]) ("defslimefun" code nil nil [6589 6645]) ("defslimefun" code nil nil [6647 6818]) ("defslimefun" code nil nil [6820 6947]) (":swank-ppcre" package nil nil [6949 6971]))
    :file "swank-ppcre.lisp"
    :pointmax 6971
    )
   (semanticdb-table "slime-parse.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("slime-incomplete-form-at-point" function nil nil [254 991]) ("slime-cl-symbol-external-ref-p" function (:arguments ("symbol")) nil [1017 1317]) ("slime-cl-symbol-name" function (:arguments ("symbol")) nil [1319 1638]) ("slime-cl-symbol-package" function (:arguments ("symbol" "&optional" "default")) nil [1640 1838]) ("slime-qualify-cl-symbol" function (:arguments ("symbol-or-name")) nil [1864 2034]) ("slime-qualify-cl-symbol-name" function (:arguments ("symbol-or-name")) nil [2036 2729]) ("slime-parse-sexp-at-point" function (:user-visible-flag t :arguments ("&optional" "n" "skip-blanks-p")) nil [2732 4523]) ("slime-incomplete-sexp-at-point" function (:arguments ("&optional" "n")) nil [4525 4738]) ("slime-parse-extended-operator-name" function (:arguments ("user-point" "forms" "indices" "points")) nil [4741 5988]) ("slime-extended-operator-name-parser-alist" variable (:default-value (quote (("MAKE-INSTANCE" slime-make-extended-operator-parser/look-ahead 1) ("MAKE-CONDITION" slime-make-extended-operator-parser/look-ahead 1) ("ERROR" slime-make-extended-operator-parser/look-ahead 1) ("SIGNAL" slime-make-extended-operator-parser/look-ahead 1) ("WARN" slime-make-extended-operator-parser/look-ahead 1) ("CERROR" slime-make-extended-operator-parser/look-ahead 2) ("CHANGE-CLASS" slime-make-extended-operator-parser/look-ahead 2) ("DEFMETHOD" slime-make-extended-operator-parser/look-ahead 1) ("APPLY" slime-make-extended-operator-parser/look-ahead 1) ("DECLARE" . slime-parse-extended-operator/declare) ("DECLAIM" . slime-parse-extended-operator/declare) ("PROCLAIM" . slime-parse-extended-operator/declare)))) nil [5991 6915]) ("slime-make-extended-operator-parser/look-ahead" function (:arguments ("steps")) nil [6917 7561]) ("slime-parse-extended-operator/declare" function (:arguments ("name" "user-point" "current-forms" "current-indices" "current-points")) nil [7563 9473]) ("slime-nesting-until-point" function (:arguments ("target-point")) nil [9475 9916]) ("slime-make-form-spec-from-string" function (:arguments ("string" "&optional" "strip-operator-p")) nil [9918 11536]) ("slime-enclosing-form-specs" function (:arguments ("&optional" "max-levels")) nil [11539 15693]) ("slime-ensure-list" function (:arguments ("thing")) nil [15696 15769]) ("slime-inside-string-p" function nil nil [15771 16065]) ("slime-beginning-of-string" function nil nil [16067 16249]) ("slime-parse" package nil nil [16251 16273]))
    :file "slime-parse.el"
    :pointmax 16275
    :unmatched-syntax 'nil
    )
   (semanticdb-table "slime-references.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("slime-sbcl-manual-root" variable (:user-visible-flag t :default-value "http://www.sbcl.org/manual/") nil [232 397]) ("sldb-reference-face" variable (:default-value (list (list t (quote (:underline t))))) nil [399 513]) ("slime-note.references" function (:arguments ("note")) nil [515 582]) ("slime-tree-print-with-references" function (:arguments ("tree")) nil [584 972]) ("slime-tree-insert-references" function (:arguments ("references")) nil [974 1839]) ("sldb-insert-references" function (:arguments ("references")) nil [1889 2320]) ("sldb-reference-properties" function (:arguments ("reference")) nil [2322 3073]) ("sldb-format-reference-source" function (:arguments ("where")) nil [3075 3289]) ("sldb-format-reference-node" function (:arguments ("what")) nil [3291 3406]) ("sldb-lookup-reference" function nil nil [3408 4095]) ("sldb-maybe-insert-references" function (:arguments ("extra")) nil [4097 4349]) ("slime-references-init" function nil nil [4373 4529]) ("slime-references-unload" function nil nil [4531 4686]) ("slime-references" package nil nil [4690 4717]))
    :file "slime-references.el"
    :pointmax 4718
    )
   (semanticdb-table "slime-tramp.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("slime-make-tramp-file-name" function (:arguments ("username" "remote-host" "lisp-filename")) nil [337 875]) ("slime-create-filename-translator" function (:arguments ("&key" "machine-instance" "remote-host" "username")) nil [877 2163]) ("slime-tramp" package nil nil [2165 2187]))
    :file "slime-tramp.el"
    :pointmax 2187
    :unmatched-syntax 'nil
    )
   (semanticdb-table "slime-ppcre.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("*slime-ppcre-default-directory*" variable (:default-value (expand-file-name "~/")) nil [370 521]) ("*slime-ppcre-fifo-path*" variable (:default-value "/tmp/slime-ppcre.fifo") nil [523 674]) ("slime-ppcre-compilation-start" function (:arguments ("highlight-regexp")) nil [676 1077]) ("slime-ppcre-delete-fifo-callback" function (:arguments ("res")) nil [1079 1186]) ("slime-ppcre-occurrences-to-fifo" function (:arguments ("regex" "system-or-systems")) nil [1188 1535]) ("slime-ppcre-replacement-message-callback" function (:arguments ("file-num")) nil [1537 1693]) ("slime-ppcre-replace-regex" function (:arguments ("regex" "replace" "system-or-systems")) nil [1695 1979]) ("slime-ppcre-swank-symbol-value-form" function (:arguments ("symbol-name")) nil [1981 2265]) ("slime-ppcre-find-regex-system" function (:user-visible-flag t :arguments ("regex" "system")) nil [2294 2610]) ("slime-ppcre-find-regex-systems-all" function (:user-visible-flag t :arguments ("regex")) nil [2612 2911]) ("slime-ppcre-find-regex-systems-variable" function (:user-visible-flag t :arguments ("regex" "variable-name")) nil [2913 3368]) ("slime-ppcre-replace-regex-system" function (:user-visible-flag t :arguments ("regex" "replace" "system")) nil [3384 3858]) ("slime-ppcre-replace-regex-systems-all" function (:user-visible-flag t :arguments ("regex" "replace")) nil [3860 4263]) ("slime-ppcre-replace-regex-systems-variable" function (:user-visible-flag t :arguments ("regex" "replace" "variable-name")) nil [4265 4828]) ("slime-ppcre-init" function nil nil [4852 4964]) ("slime-ppcre-define-key" function (:arguments ("key" "command")) nil [4966 5099]) ("slime-ppcre-bind-keys" function nil nil [5101 5645]) ("slime-ppcre-on-connect" function nil nil [5647 5737]) ("slime-ppcre-init" code nil nil [5739 5757]) ("slime-ppcre" package nil nil [5759 5781]))
    :file "slime-ppcre.el"
    :pointmax 5781
    )
   (semanticdb-table "slime-scratch.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("slime-scratch-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map lisp-mode-map) map)) nil [362 480]) ("slime-scratch" function nil nil [482 557]) ("slime-switch-to-scratch-buffer" function nil nil [559 726]) ("slime-scratch-buffer" function nil nil [728 1005]) ("slime-define-keys" code nil nil [1007 1094]) ("slime-scratch-init" function nil nil [1096 1215]) ("slime-scratch" package nil nil [1217 1241]))
    :file "slime-scratch.el"
    :pointmax 1241
    )
   (semanticdb-table "slime-fuzzy.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("slime-fuzzy-completion-in-place" variable (:default-value t) nil [469 671]) ("slime-fuzzy-completion-limit" variable (:default-value 300) nil [673 813]) ("slime-fuzzy-completion-time-limit-in-msec" variable (:default-value 1500) nil [815 1045]) ("slime-fuzzy-target-buffer" variable nil nil [1047 1149]) ("slime-fuzzy-saved-window-configuration" variable nil nil [1150 1282]) ("slime-fuzzy-start" variable nil nil [1283 1408]) ("slime-fuzzy-end" variable nil nil [1409 1523]) ("slime-fuzzy-original-text" variable nil nil [1524 1690]) ("slime-fuzzy-text" variable nil nil [1691 1895]) ("slime-fuzzy-first" variable nil nil [1896 2043]) ("slime-fuzzy-last" variable nil nil [2044 2271]) ("slime-fuzzy-current-completion" variable nil nil [2272 2482]) ("slime-fuzzy-current-completion-overlay" variable nil nil [2483 2649]) ("mimic-key-bindings" function (:arguments ("from-keymap" "to-keymap" "bindings-or-operation" "operation")) nil [2801 3542]) ("slime-target-buffer-fuzzy-completions-map" variable (:default-value (let* ((map (make-sparse-keymap))) (flet ((remap (keys to) (mimic-key-bindings global-map map keys to))) (remap (list (quote keyboard-quit) (kbd "C-g")) (quote slime-fuzzy-abort)) (remap (list (quote slime-fuzzy-indent-and-complete-symbol) (quote slime-indent-and-complete-symbol) (kbd "<tab>")) (quote slime-fuzzy-select-or-update-completions)) (remap (list (quote previous-line) (kbd "<up>")) (quote slime-fuzzy-prev)) (remap (list (quote next-line) (kbd "<down>")) (quote slime-fuzzy-next)) (remap (list (quote isearch-forward) (kbd "C-s")) (lambda nil (interactive) (select-window (get-buffer-window (slime-get-fuzzy-buffer))) (call-interactively (quote isearch-forward)))) (dolist (key (list (kbd "<return>") (kbd "RET") (kbd "<SPC>") "(" ")" "[" "]")) (define-key map key (quote slime-fuzzy-select-and-process-event-in-target-buffer)))) map)) nil [3544 4738]) ("setf" code nil nil [4832 5036]) ("define-minor-mode" code nil nil [5039 5390]) ("add-to-list" code nil nil [5392 5532]) ("define-derived-mode" code nil nil [5534 7356]) ("slime-fuzzy-completions-map" variable (:default-value (let* ((map (make-sparse-keymap))) (flet ((remap (keys to) (mimic-key-bindings global-map map keys to))) (remap (list (quote keyboard-quit) (kbd "C-g")) (quote slime-fuzzy-abort)) (define-key map "q" (quote slime-fuzzy-abort)) (remap (list (quote previous-line) (kbd "<up>")) (quote slime-fuzzy-prev)) (remap (list (quote next-line) (kbd "<down>")) (quote slime-fuzzy-next)) (define-key map "n" (quote slime-fuzzy-next)) (define-key map "\356" (quote slime-fuzzy-next)) (define-key map "p" (quote slime-fuzzy-prev)) (define-key map "\360" (quote slime-fuzzy-prev)) (define-key map "" (quote scroll-down)) (remap (list (quote slime-fuzzy-indent-and-complete-symbol) (quote slime-indent-and-complete-symbol) (kbd "<tab>")) (quote slime-fuzzy-select)) (define-key map (kbd "<mouse-2>") (quote slime-fuzzy-select/mouse))) (define-key map (kbd "RET") (quote slime-fuzzy-select)) (define-key map (kbd "<SPC>") (quote slime-fuzzy-select)) map)) nil [7358 8468]) ("slime-fuzzy-completions" function (:arguments ("prefix" "&optional" "default-package")) nil [8470 9136]) ("slime-fuzzy-selected" function (:arguments ("prefix" "completion")) nil [9138 9542]) ("slime-fuzzy-indent-and-complete-symbol" function (:user-visible-flag t) nil [9544 10209]) ("slime-fuzzy-complete-symbol" function (:user-visible-flag t) nil [10211 11684]) ("slime-get-fuzzy-buffer" function nil nil [11687 11764]) ("slime-fuzzy-explanation" variable (:default-value "For help on how the use this buffer, see `slime-fuzzy-completions-mode'.

Flags: boundp fboundp generic-function class macro special-operator package

") nil [11766 12046]) ("slime-fuzzy-insert-completion-choice" function (:arguments ("completion" "max-length")) nil [12048 13438]) ("slime-fuzzy-insert" function (:arguments ("text")) nil [13440 14215]) ("slime-fuzzy-choices-buffer" function (:arguments ("completions" "interrupted-p" "start" "end")) nil [14217 15910]) ("slime-fuzzy-fill-completions-buffer" function (:arguments ("completions" "interrupted-p")) nil [15912 17123]) ("slime-fuzzy-enable-target-buffer-completions-mode" function nil nil [17125 17423]) ("slime-fuzzy-disable-target-buffer-completions-mode" function nil nil [17425 17727]) ("slime-fuzzy-insert-from-point" function nil nil [17729 18372]) ("slime-fuzzy-post-command-hook" function nil nil [18374 18876]) ("slime-fuzzy-next" function (:user-visible-flag t) nil [18878 19329]) ("slime-fuzzy-prev" function (:user-visible-flag t) nil [19331 19791]) ("slime-fuzzy-dehighlight-current-completion" function nil nil [19793 20021]) ("slime-fuzzy-highlight-current-completion" function nil nil [20023 20441]) ("slime-fuzzy-abort" function (:user-visible-flag t) nil [20443 20661]) ("slime-fuzzy-select" function (:user-visible-flag t) nil [20663 21222]) ("slime-fuzzy-select-or-update-completions" function (:user-visible-flag t) nil [21224 21766]) ("slime-fuzzy-process-event-in-completions-buffer" function (:user-visible-flag t) nil [21768 21993]) ("slime-fuzzy-select-and-process-event-in-target-buffer" function (:user-visible-flag t) nil [21995 22529]) ("slime-fuzzy-select/mouse" function (:user-visible-flag t :arguments ("event")) nil [22531 22991]) ("slime-fuzzy-done" function nil nil [22993 23893]) ("slime-fuzzy-maybe-restore-window-configuration" function nil nil [23895 24380]) ("slime-fuzzy-window-configuration-change" function nil nil [24382 24613]) ("slime-fuzzy-init" function nil nil [24636 24748]) ("slime-fuzzy-bind-keys" function nil nil [24750 24927]) ("slime-fuzzy-on-connect" function nil nil [24929 25019]) ("slime-fuzzy" package nil nil [25021 25043]))
    :file "slime-fuzzy.el"
    :pointmax 25044
    )
   (semanticdb-table "slime-presentation-streams.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("slime-presentations" include nil nil [591 621]) ("add-hook" code nil nil [623 691]) ("slime-install-presentation-streams" function nil nil [693 810]) ("slime-presentation-streams" package nil nil [812 849]))
    :file "slime-presentation-streams.el"
    :pointmax 851
    :unmatched-syntax 'nil
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0pre3"
  :semanticdb-version "2.0pre3"
  )
