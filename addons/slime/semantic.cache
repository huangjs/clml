;; Object slime/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "slime/"
  :tables (list 
   (semanticdb-table "swank.lisp"
    :major-mode 'lisp-mode
    :tags '(("defpackage" code nil nil [604 2089]) ("in-package" code nil nil [2091 2110]) ("defconstant" code nil nil [2159 2231]) ("defconstant" code nil nil [2233 2311]) ("*canonical-package-nicknames*" variable (:default-value (\` ((:common-lisp-user . :cl-user)))) nil [2313 2457]) ("*auto-abbreviate-dotted-packages*" variable (:default-value t) nil [2459 2569]) ("*swank-io-package*" variable (:default-value (let ((package (make-package :swank-io-package :use (quote nil)))) (import (quote (nil t quote)) package) package)) nil [2571 2708]) ("defconstant" code nil nil [2710 2813]) ("*swank-debug-p*" variable (:default-value t) nil [2815 2891]) ("*redirect-io*" variable (:default-value t) nil [2893 3037]) ("*sldb-printer-bindings*" variable (:default-value (\` ((*print-pretty* . t) (*print-level* . 4) (*print-length* . 10) (*print-circle* . t) (*print-readably*) (*print-pprint-dispatch* \, (copy-pprint-dispatch nil)) (*print-gensym* . t) (*print-base* . 10) (*print-radix*) (*print-array* . t) (*print-lines* . 10) (*print-escape* . t) (*print-right-margin* . 70)))) nil [3039 3614]) ("*default-worker-thread-bindings*" variable (:default-value (quote nil)) nil [3616 3831]) ("call-with-bindings" function (:arguments ("alist" "fun")) nil [3833 4123]) ("with-bindings" function (:arguments ("alist" "&body" "body")) nil [4125 4248]) ("defslimefun" function (:arguments ("name" "arglist" "&body" "rest")) nil [4331 4712]) ("missing-arg" function nil nil [4714 5052]) ("add-hook" function (:arguments ("place" "function")) nil [5222 5337]) ("run-hook" function (:arguments ("functions" "&rest" "arguments")) nil [5339 5489]) ("*new-connection-hook*" variable (:default-value (quote nil)) nil [5491 5698]) ("*connection-closed-hook*" variable (:default-value (quote nil)) nil [5700 5890]) ("*pre-reply-hook*" variable (:default-value (quote nil)) nil [5892 5993]) ("*after-init-hook*" variable (:default-value (quote nil)) nil [5995 6072]) ("run-after-init-hook" function nil nil [6074 6135]) ("connection" type (:members ("socket-io" "dedicated-output" "user-input" "user-output" "user-io" "trace-output" "repl-results" "reader-thread" "control-thread" "repl-thread" "serve-requests" "read" "send" "cleanup" "indentation-cache" "indentation-cache-packages" "communication-style" "coding-system") :type "struct") nil [6428 8852]) ("print-connection" function (:arguments ("conn" "stream" "depth")) nil [8854 8987]) ("*connections*" variable (:default-value (quote nil)) nil [8989 9086]) ("*emacs-connection*" variable nil nil [9088 9165]) ("*swank-state-stack*" variable (:default-value (quote nil)) nil [9167 9329]) ("default-connection" function nil nil [9331 9638]) ("defslimefun" code nil nil [9640 9735]) ("define-condition" code nil nil [9786 10058]) ("make-swank-error" function (:arguments ("condition")) nil [10060 10291]) ("add-hook" code nil nil [10293 10355]) ("notify-backend-of-connection" function (:arguments ("connection")) nil [10356 10457]) ("with-io-redirection" function (:arguments ("connection" "&body" "body")) nil [10498 10740]) ("maybe-call-with-io-redirection" function (:arguments ("connection" "fun")) nil [10742 10885]) ("with-connection" function (:arguments ("connection" "&body" "body")) nil [10893 11049]) ("call-with-connection" function (:arguments ("connection" "fun")) nil [11051 11243]) ("without-interrupts" function (:arguments ("&body" "body")) nil [11245 11335]) ("destructure-case" function (:arguments ("value" "&rest" "patterns")) nil [11337 12336]) ("with-temp-package" function (:arguments ("var" "&body" "body")) nil [12338 12604]) ("do-symbols*" function (:arguments ("var" "&body" "body")) nil [12606 13003]) ("*log-events*" variable nil nil [13022 13047]) ("*log-output*" variable (:default-value *error-output*) nil [13048 13084]) ("*event-history*" variable (:default-value (make-array 40 :initial-element nil)) nil [13085 13208]) ("*event-history-index*" variable nil nil [13209 13241]) ("*enable-event-history*" variable (:default-value t) nil [13242 13275]) ("log-event" function (:arguments ("format-string" "&rest" "args")) nil [13277 13932]) ("event-history-to-list" function nil nil [13934 14146]) ("dump-event-history" function (:arguments ("stream")) nil [14148 14248]) ("dump-event" function (:arguments ("event" "stream")) nil [14250 14448]) ("escape-non-ascii" function (:arguments ("string")) nil [14450 14800]) ("ascii-string-p" function (:arguments ("o")) nil [14802 14880]) ("ascii-char-p" function (:arguments ("c")) nil [14882 14932]) ("length=" function (:arguments ("seq" "n")) nil [14948 15356]) ("ensure-list" function (:arguments ("thing")) nil [15358 15425]) ("recursively-empty-p" function (:arguments ("list")) nil [15427 15626]) ("maybecall" function (:arguments ("bool" "fn" "&rest" "args")) nil [15628 15791]) ("exactly-one-p" function (:arguments ("&rest" "values")) nil [15793 16092]) ("symbol-status" function (:arguments ("symbol" "&optional" "package")) nil [16111 19043]) ("symbol-external-p" function (:arguments ("symbol" "&optional" "package")) nil [19045 19279]) ("classify-symbol" function (:arguments ("symbol")) nil [19282 20174]) ("symbol-classification->string" function (:arguments ("flags")) nil [20176 20595]) ("*use-dedicated-output-stream*" variable nil nil [20616 20764]) ("*dedicated-output-stream-port*" variable nil nil [20766 20869]) ("*communication-style*" variable (:default-value (preferred-communication-style)) nil [20871 20933]) ("*dont-close*" variable nil nil [20935 21039]) ("*dedicated-output-stream-buffering*" variable (:default-value (if (eq *communication-style* :spawn) :full :none)) nil [21041 21249]) ("*coding-system*" variable (:default-value "iso-latin-1-unix") nil [21251 21294]) ("start-server" function (:arguments ("port-file" "&key" "style" "dont-close" "coding-system")) nil [21296 21964]) ("create-server" function (:arguments ("&key" "port" "style" "dont-close" "coding-system")) nil [21966 22479]) ("find-external-format-or-lose" function (:arguments ("coding-system")) nil [22481 22637]) ("defparameter" code nil nil [22639 22686]) ("setup-server" function (:arguments ("port" "announce-fn" "style" "dont-close" "external-format")) nil [22688 23318]) ("serve-connection" function (:arguments ("socket" "style" "dont-close" "external-format")) nil [23320 23952]) ("accept-authenticated-connection" function (:arguments ("&rest" "args")) nil [23954 24538]) ("serve-requests" function (:arguments ("connection")) nil [24882 25029]) ("announce-server-port" function (:arguments ("file" "port")) nil [25031 25287]) ("simple-announce-function" function (:arguments ("port")) nil [25289 25452]) ("open-streams" function (:arguments ("connection")) nil [25454 26339]) ("make-output-function" function (:arguments ("connection")) nil [26341 27144]) ("make-output-function-for-target" function (:arguments ("connection" "target")) nil [27146 27470]) ("make-output-stream-for-target" function (:arguments ("connection" "target")) nil [27472 27780]) ("open-dedicated-output-stream" function (:arguments ("socket-io")) nil [27782 28849]) ("*sldb-quit-restart*" variable (:default-value (quote abort)) nil [28851 28960]) ("handle-request" function (:arguments ("connection")) nil [28962 29373]) ("current-socket-io" function nil nil [29375 29447]) ("close-connection" function (:arguments ("c" "&optional" "condition" "backtrace")) nil [29449 30696]) ("*debug-on-swank-error*" variable nil nil [30698 30885]) ("with-reader-error-handler" function (:arguments ("connection" "&body" "body")) nil [30887 31525]) ("defslimefun" code nil nil [31527 31828]) ("*active-threads*" variable (:default-value (quote nil)) nil [31865 31894]) ("read-loop" function (:arguments ("control-thread" "input-stream" "connection")) nil [31896 32060]) ("dispatch-loop" function (:arguments ("socket-io" "connection")) nil [32062 32474]) ("repl-thread" function (:arguments ("connection")) nil [32476 32842]) ("find-worker-thread" function (:arguments ("id")) nil [32844 33040]) ("interrupt-worker-thread" function (:arguments ("id")) nil [33042 33224]) ("thread-for-evaluation" function (:arguments ("id")) nil [33226 33512]) ("spawn-worker-thread" function (:arguments ("connection")) nil [33514 33702]) ("spawn-repl-thread" function (:arguments ("connection" "name")) nil [33704 33886]) ("dispatch-event" function (:arguments ("event" "socket-io")) nil [33888 35686]) ("spawn-threads-for-connection" function (:arguments ("connection")) nil [35688 36911]) ("cleanup-connection-threads" function (:arguments ("connection")) nil [36913 37328]) ("repl-loop" function (:arguments ("connection")) nil [37330 37397]) ("process-available-input" function (:arguments ("stream" "fn")) nil [37399 37508]) ("input-available-p" function (:arguments ("stream")) nil [37510 37790]) ("install-sigio-handler" function (:arguments ("connection")) nil [37817 38291]) ("deinstall-sigio-handler" function (:arguments ("connection")) nil [38293 38397]) ("install-fd-handler" function (:arguments ("connection")) nil [38428 39211]) ("deinstall-fd-handler" function (:arguments ("connection")) nil [39213 39311]) ("simple-serve-requests" function (:arguments ("connection")) nil [39342 39619]) ("read-from-socket-io" function nil nil [39621 40211]) ("send-to-socket-io" function (:arguments ("event")) nil [40213 41057]) ("initialize-streams-for-connection" function (:arguments ("connection")) nil [41059 41509]) ("create-connection" function (:arguments ("socket-io" "style")) nil [41511 43266]) ("*globally-redirect-io*" variable nil nil [44388 44489]) ("*saved-global-streams*" variable (:default-value (quote nil)) nil [44523 44736]) ("setup-stream-indirection" function (:arguments ("stream-var" "&optional" "stream")) nil [44738 45928]) ("prefixed-var" function (:arguments ("prefix" "variable-symbol")) nil [45930 46158]) ("*standard-output-streams*" variable (:default-value (quote (*standard-output* *error-output* *trace-output*))) nil [46160 46295]) ("*standard-input-streams*" variable (:default-value (quote (*standard-input*))) nil [46297 46399]) ("*standard-io-streams*" variable (:default-value (quote (*debug-io* *query-io* *terminal-io*))) nil [46401 46516]) ("init-global-stream-redirection" function nil nil [46518 46758]) ("add-hook" code nil nil [46760 46820]) ("revert-global-io-redirection" function nil nil [47780 48154]) ("*global-stdio-connection*" variable nil nil [48188 48344]) ("maybe-redirect-global-io" function (:arguments ("connection")) nil [48346 48631]) ("update-redirection-after-close" function (:arguments ("closed-connection")) nil [48633 49170]) ("add-hook" code nil nil [49172 49233]) ("add-hook" code nil nil [49234 49301]) ("call-with-redirected-io" function (:arguments ("connection" "function")) nil [49467 50059]) ("read-from-emacs" function nil nil [50061 50197]) ("read-from-control-thread" function nil nil [50199 50246]) ("decode-message" function (:arguments ("stream")) nil [50248 50796]) ("decode-message-length" function (:arguments ("stream")) nil [50798 50978]) ("read-form" function (:arguments ("string")) nil [50980 51109]) ("*slime-features*" variable nil nil [51111 51190]) ("send-to-emacs" function (:arguments ("object")) nil [51192 51304]) ("send-oob-to-emacs" function (:arguments ("object")) nil [51306 51365]) ("send-to-control-thread" function (:arguments ("object")) nil [51367 51469]) ("encode-message" function (:arguments ("message" "stream")) nil [51471 51790]) ("prin1-to-string-for-emacs" function (:arguments ("object")) nil [51792 52035]) ("force-user-output" function nil nil [52037 52184]) ("clear-user-input" function nil nil [52186 52273]) ("*read-input-catch-tag*" variable nil nil [52275 52308]) ("intern-catch-tag" function (:arguments ("tag")) nil [52310 52444]) ("read-user-input-from-emacs" function nil nil [52446 52858]) ("y-or-n-p-in-emacs" function (:arguments ("format-string" "&rest" "arguments")) nil [52860 53230]) ("defslimefun" code nil nil [53232 53360]) ("eval-in-emacs" function (:arguments ("form" "&optional" "nowait")) nil [54310 54927]) ("*swank-wire-protocol-version*" variable nil nil [54929 55030]) ("defslimefun" code nil nil [55032 56047]) ("defslimefun" code nil nil [56049 56556]) ("define-special" function (:arguments ("name" "doc")) nil [56587 56813]) ("define-special" code nil nil [56815 57057]) ("define-special" code nil nil [57059 57145]) ("with-buffer-syntax" function (:arguments ("&rest" "&body" "body")) nil [57147 57429]) ("call-with-buffer-syntax" function (:arguments ("fun")) nil [57431 57783]) ("to-string" function (:arguments ("object")) nil [57785 58235]) ("from-string" function (:arguments ("string")) nil [58237 58397]) ("untokenize-symbol" function (:arguments ("package-name" "internal-p" "symbol-name")) nil [60400 60827]) ("casify-char" function (:arguments ("char")) nil [60829 61145]) ("parse-symbol" function (:arguments ("string" "&optional" "package")) nil [61147 61747]) ("parse-symbol-or-lose" function (:arguments ("string" "&optional" "package")) nil [61749 61993]) ("parse-package" function (:arguments ("string")) nil [62022 62448]) ("unparse-name" function (:arguments ("string")) nil [62450 62650]) ("*readtable-alist*" variable (:default-value (default-readtable-alist)) nil [62917 63019]) ("guess-buffer-readtable" function (:arguments ("package-name")) nil [63021 63269]) ("*pending-continuations*" variable (:default-value (quote nil)) nil [63290 63378]) ("guess-buffer-package" function (:arguments ("string")) nil [63380 63566]) ("eval-for-emacs" function (:arguments ("form" "buffer-package" "id")) nil [63568 64738]) ("*echo-area-prefix*" variable (:default-value "=> ") nil [64740 64833]) ("format-values-for-echo-area" function (:arguments ("values")) nil [64835 65259]) ("defslimefun" code nil nil [65261 65481]) ("defslimefun" code nil nil [65483 65788]) ("eval-region" function (:arguments ("string")) nil [65790 66224]) ("defslimefun" code nil nil [66226 66353]) ("defslimefun" code nil nil [66355 66631]) ("*swank-pprint-bindings*" variable (:default-value (\` ((*print-pretty* . t) (*print-level*) (*print-length*) (*print-circle* . t) (*print-gensym* . t) (*print-readably*)))) nil [66633 66913]) ("swank-pprint" function (:arguments ("list")) nil [66915 67275]) ("defslimefun" code nil nil [67279 67413]) ("defslimefun" code nil nil [67415 67700]) ("*listener-eval-function*" variable (:default-value (quote repl-eval)) nil [67723 67767]) ("defslimefun" code nil nil [67769 67849]) ("*send-repl-results-function*" variable (:default-value (quote send-repl-results-to-emacs)) nil [67851 67916]) ("repl-eval" function (:arguments ("string")) nil [67918 68283]) ("track-package" function (:arguments ("fun")) nil [68285 68539]) ("cat" function (:arguments ("&rest" "strings")) nil [68865 69106]) ("package-string-for-prompt" function (:arguments ("package")) nil [69108 69368]) ("canonical-package-nickname" function (:arguments ("package")) nil [69370 69633]) ("shortest-package-nickname" function (:arguments ("package")) nil [69969 70354]) ("defslimefun" code nil nil [70356 71314]) ("defslimefun" code nil nil [71316 71699]) ("defslimefun" code nil nil [71701 71996]) ("defslimefun" code nil nil [71998 72277]) ("background-message" function (:arguments ("format-string" "&rest" "args")) nil [72279 72632]) ("swank-debugger-hook" function (:arguments ("condition" "hook")) nil [72651 73141]) ("*global-debugger*" variable (:default-value t) nil [73143 73241]) ("add-hook" code nil nil [73243 73293]) ("install-debugger" function (:arguments ("connection")) nil [73294 73444]) ("*swank-debugger-condition*" variable nil nil [73534 73607]) ("*sldb-level*" variable nil nil [73609 73678]) ("*sldb-initial-frames*" variable (:default-value 20) nil [73680 73774]) ("*sldb-restarts*" variable nil nil [73776 73847]) ("*sldb-stepping-p*" variable nil nil [73849 73924]) ("debug-in-emacs" function (:arguments ("condition")) nil [73926 74532]) ("sldb-loop" function (:arguments ("level")) nil [74534 75224]) ("handle-sldb-condition" function (:arguments ("condition")) nil [75226 75633]) ("safe-condition-message" function (:arguments ("condition")) nil [75635 76101]) ("debugger-condition-for-emacs" function nil nil [76103 76359]) ("format-restarts-for-emacs" function nil nil [76361 76702]) ("defslimefun" code nil nil [76730 76891]) ("defslimefun" code nil nil [76893 77378]) ("defslimefun" code nil nil [77380 78721]) ("nth-restart" function (:arguments ("index")) nil [78723 78780]) ("defslimefun" code nil nil [78782 78875]) ("defslimefun" code nil nil [78877 78973]) ("defslimefun" code nil nil [78975 79018]) ("defslimefun" code nil nil [79020 79382]) ("defslimefun" code nil nil [79384 79641]) ("wrap-sldb-vars" function (:arguments ("form")) nil [79643 79723]) ("defslimefun" code nil nil [79725 79876]) ("defslimefun" code nil nil [79878 80041]) ("defslimefun" code nil nil [80043 80427]) ("defslimefun" code nil nil [80429 80537]) ("defslimefun" code nil nil [80539 80653]) ("defslimefun" code nil nil [80655 80813]) ("defslimefun" code nil nil [80815 80922]) ("define-stepper-function" function (:arguments ("name" "backend-function-name")) nil [80924 81391]) ("define-stepper-function" code nil nil [81393 81443]) ("define-stepper-function" code nil nil [81444 81494]) ("define-stepper-function" code nil nil [81495 81544]) ("*compiler-notes*" variable (:default-value (quote nil)) nil [81576 81663]) ("clear-compiler-notes" function nil nil [81665 81728]) ("canonicalize-filename" function (:arguments ("filename")) nil [81730 81805]) ("defslimefun" code nil nil [81807 81946]) ("measure-time-interval" function (:arguments ("fn")) nil [81948 82290]) ("record-note-for-condition" function (:arguments ("condition")) nil [82292 82438]) ("make-compiler-note" function (:arguments ("condition")) nil [82440 82845]) ("swank-compiler" function (:arguments ("function")) nil [82847 83505]) ("defslimefun" code nil nil [83507 83933]) ("defslimefun" code nil nil [83935 84371]) ("file-newer-p" function (:arguments ("new-file" "old-file")) nil [84375 84528]) ("requires-compile-p" function (:arguments ("source-file")) nil [84530 84711]) ("defslimefun" code nil nil [84713 84934]) ("defslimefun" code nil nil [84952 85016]) ("defslimefun" code nil nil [85018 85148]) ("defslimefun" code nil nil [85173 85320]) ("*find-module*" variable (:default-value (quote find-module)) nil [85322 85528]) ("module-filename" function (:arguments ("module")) nil [85530 85694]) ("merged-directory" function (:arguments ("dirname" "defaults")) nil [85735 85908]) ("*load-path*" variable (:default-value (list (make-pathname :directory (merged-directory "contrib" *load-truename*) :name nil :type nil :version nil :defaults *load-truename*))) nil [85910 86165]) ("module-canditates" function (:arguments ("name" "dir")) nil [86167 86339]) ("find-module" function (:arguments ("module")) nil [86341 86508]) ("*macroexpand-printer-bindings*" variable (:default-value (quote ((*print-circle*) (*print-pretty* . t) (*print-escape* . t) (*print-lines*) (*print-level*) (*print-length*)))) nil [86533 86729]) ("apply-macro-expander" function (:arguments ("expander" "string")) nil [86731 86918]) ("defslimefun" code nil nil [86920 87010]) ("defslimefun" code nil nil [87012 87098]) ("defslimefun" code nil nil [87100 87194]) ("defslimefun" code nil nil [87196 87304]) ("defslimefun" code nil nil [87306 87410]) ("defslimefun" code nil nil [87412 87617]) ("defslimefun" code nil nil [87645 87885]) ("all-completions" function (:arguments ("string" "buffer-package" "test")) nil [87887 88403]) ("matching-symbols" function (:arguments ("package" "external" "test")) nil [88405 88697]) ("unparse-symbol" function (:arguments ("symbol")) nil [88699 88914]) ("prefix-match-p" function (:arguments ("prefix" "string")) nil [88916 89080]) ("longest-common-prefix" function (:arguments ("strings")) nil [89082 89406]) ("format-completion-set" function (:arguments ("strings" "internal-p" "package-name")) nil [89408 89691]) ("defslimefun" code nil nil [89724 89996]) ("defslimefun" code nil nil [90020 90713]) ("map-if" function (:arguments ("test" "fn" "&rest" "lists")) nil [91208 91474]) ("listify" function (:arguments ("f")) nil [91476 91649]) ("present-symbol-before-p" function (:arguments ("x" "y")) nil [91651 92472]) ("let" code nil nil [92474 92836]) ("make-regexp-matcher" function (:arguments ("string" "case-sensitive")) nil [92838 93101]) ("apropos-symbols" function (:arguments ("string" "external-only" "case-sensitive" "package")) nil [93103 93722]) ("call-with-describe-settings" function (:arguments ("fn")) nil [93724 93814]) ("with-describe-settings" function (:arguments ("&rest" "&body" "body")) nil [93816 93947]) ("describe-to-string" function (:arguments ("object")) nil [93953 94090]) ("defslimefun" code nil nil [94092 94221]) ("defslimefun" code nil nil [94223 94447]) ("defslimefun" code nil nil [94449 94675]) ("defslimefun" code nil nil [95262 95573]) ("tracedp" function (:arguments ("fspec")) nil [95635 95691]) ("defslimefun" code nil nil [95693 96062]) ("defslimefun" code nil nil [96064 96104]) ("defslimefun" code nil nil [96106 96276]) ("defslimefun" code nil nil [96295 96428]) ("profiledp" function (:arguments ("fspec")) nil [96448 96511]) ("defslimefun" code nil nil [96513 96792]) ("defslimefun" code nil nil [96819 97208]) ("alistify" function (:arguments ("list" "key" "test")) nil [97210 97607]) ("location-position<" function (:arguments ("pos1" "pos2")) nil [97609 97781]) ("partition" function (:arguments ("list" "test" "key")) nil [97783 97988]) ("xref" type (:members ("dspec" "location") :type "struct") nil [97990 98074]) ("location-valid-p" function (:arguments ("location")) nil [98076 98143]) ("xref-buffer" function (:arguments ("xref")) nil [98145 98212]) ("xref-position" function (:arguments ("xref")) nil [98214 98283]) ("group-xrefs" function (:arguments ("xrefs")) nil [98285 99320]) ("defslimefun" code nil nil [99322 99829]) ("common-seperated-spec" function (:arguments ("list" "&optional" "callback")) nil [99850 100038]) ("inspector-princ" function (:arguments ("list")) nil [100040 100327]) ("inspect-for-emacs" function (:parent "cons" :arguments ("object" "inspector")) nil [100329 100526]) ("inspect-for-emacs-simple-cons" function (:arguments ("cons")) nil [100528 100687]) ("inspect-for-emacs-list" function (:arguments ("list")) nil [100689 102103]) ("safe-length" function (:arguments ("list")) nil [102153 102841]) ("*slime-inspect-contents-limit*" variable nil nil [102843 103040]) ("inspect-for-emacs" function (:parent "hash-table" :arguments ("ht" "inspector")) nil [103042 104423]) ("inspect-bigger-piece-actions" function (:arguments ("thing" "size")) nil [104425 104675]) ("inspect-whole-thing-action" function (:arguments ("thing" "size")) nil [104677 104896]) ("inspect-show-more-action" function (:arguments ("thing")) nil [104898 105233]) ("inspect-for-emacs" function (:parent "array" :arguments ("array" "inspector")) nil [105235 106125]) ("inspect-for-emacs" function (:parent "character" :arguments ("char" "inspector")) nil [106127 106646]) ("*inspectee*" variable nil nil [106648 106668]) ("*inspectee-parts*" variable nil nil [106669 106695]) ("*inspectee-actions*" variable nil nil [106697 106725]) ("*inspector-stack*" variable (:default-value (quote nil)) nil [106726 106756]) ("*inspector-history*" variable (:default-value (make-array 10 :adjustable t :fill-pointer 0)) nil [106757 106831]) ("declaim" code nil nil [106832 106875]) ("*inspect-length*" variable (:default-value 30) nil [106876 106904]) ("*default-inspector*" variable (:default-value (make-default-inspector)) nil [106905 106958]) ("reset-inspector" function nil nil [106960 107261]) ("valid-function-name-p" function (:arguments ("form")) nil [107281 107518]) ("defslimefun" code nil nil [107520 107659]) ("print-part-to-string" function (:arguments ("value")) nil [107661 107854]) ("assign-index" function (:arguments ("object" "vector")) nil [108390 108515]) ("value-part-for-emacs" function (:arguments ("object" "string")) nil [108517 108676]) ("action-part-for-emacs" function (:arguments ("label" "lambda" "refreshp")) nil [108678 108848]) ("inspect-object" function (:arguments ("object" "&optional" "inspector")) nil [108850 109420]) ("defslimefun" code nil nil [109422 109495]) ("defslimefun" code nil nil [109497 109609]) ("defslimefun" code nil nil [109611 109939]) ("defslimefun" code nil nil [109941 110242]) ("defslimefun" code nil nil [110244 110577]) ("defslimefun" code nil nil [110579 110646]) ("defslimefun" code nil nil [110648 110705]) ("defslimefun" code nil nil [110707 110850]) ("defslimefun" code nil nil [110852 111023]) ("defslimefun" code nil nil [111025 111182]) ("defslimefun" code nil nil [111184 111322]) ("defslimefun" code nil nil [111324 111464]) ("*thread-list*" variable nil nil [111489 111656]) ("defslimefun" code nil nil [111658 112014]) ("defslimefun" code nil nil [112016 112079]) ("nth-thread" function (:arguments ("index")) nil [112081 112135]) ("defslimefun" code nil nil [112137 112347]) ("defslimefun" code nil nil [112349 112421]) ("defslimefun" code nil nil [112423 112736]) ("mop-helper" function (:arguments ("class-name" "fn")) nil [112759 112946]) ("defslimefun" code nil nil [112948 113417]) ("sync-features-to-emacs" function nil nil [113558 113849]) ("features-for-emacs" function nil nil [113851 113971]) ("add-hook" code nil nil [113973 114024]) ("*configure-emacs-indentation*" variable (:default-value t) nil [114394 114521]) ("defslimefun" code nil nil [114523 114628]) ("sync-indentation-to-emacs" function nil nil [114672 114937]) ("need-full-indentation-update-p" function (:arguments ("connection")) nil [114939 115296]) ("perform-indentation-update" function (:arguments ("connection" "force")) nil [115298 115828]) ("update-indentation/delta-for-emacs" function (:arguments ("cache" "&optional" "force")) nil [115830 116803]) ("package-names" function (:arguments ("package")) nil [116805 116974]) ("cl-symbol-p" function (:arguments ("symbol")) nil [116976 117097]) ("known-to-emacs-p" function (:arguments ("symbol")) nil [117099 117220]) ("symbol-indentation" function (:arguments ("symbol")) nil [117222 117658]) ("macro-indentation" function (:arguments ("arglist")) nil [117660 117809]) ("clean-arglist" function (:arguments ("arglist")) nil [117811 118143]) ("well-formed-list-p" function (:arguments ("list")) nil [118145 118312]) ("print-indentation-lossage" function (:arguments ("&optional" "stream")) nil [118314 119392]) ("add-hook" code nil nil [119394 119448]))
    :file "swank.lisp"
    :pointmax 119475
    )
   (semanticdb-table "slime.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("cl" include nil nil [1949 1962]) ("unless" code nil nil [1965 2092]) ("comint" include nil nil [2094 2111]) ("timer" include nil nil [2112 2128]) ("pp" include nil nil [2129 2142]) ("hideshow" include nil nil [2143 2162]) ("hyperspec" include nil nil [2163 2183]) ("font-lock" include nil nil [2184 2204]) ("when" code nil nil [2205 2251]) ("easymenu" include nil nil [2252 2271]) ("slime-lisp-modes" variable (:default-value (quote (lisp-mode))) nil [2273 2311]) ("slime-setup" function (:arguments ("&optional" "contribs")) nil [2313 2700]) ("slime-lisp-mode-hook" function nil nil [2702 2838]) ("slime-path" variable (:default-value (let ((path (or (locate-library "slime") load-file-name))) (and path (file-name-directory path)))) nil [2861 3187]) ("slime-changelog-date" function nil nil [3210 3638]) ("slime-protocol-version" variable nil nil [3641 3676]) ("setq" code nil nil [3677 3755]) ("defgroup" code nil nil [3797 3911]) ("defgroup" code nil nil [3929 4039]) ("slime-truncate-lines" variable (:default-value t) nil [4041 4264]) ("slime-update-modeline-package" variable (:default-value t) nil [4266 4471]) ("slime-kill-without-query-p" variable nil nil [4473 4695]) ("defgroup" code nil nil [4715 4806]) ("slime-backend" variable (:default-value "swank-loader.lisp") nil [4808 5068]) ("slime-connected-hook" variable nil nil [5070 5200]) ("slime-filename-translations" variable nil nil [5202 6730]) ("slime-enable-evaluate-in-emacs" variable (:user-visible-flag t) nil [6732 6952]) ("defgroup" code nil nil [6972 7081]) ("slime-edit-definition-fallback-function" variable nil nil [7083 7612]) ("slime-complete-symbol-function" variable (:user-visible-flag t :default-value (quote slime-simple-complete-symbol)) nil [7614 7950]) ("slime-when-complete-filename-expand" variable nil nil [7952 8155]) ("slime-space-information-p" variable (:default-value t) nil [8157 8282]) ("defgroup" code nil nil [8308 8424]) ("slime-underline-color" function (:arguments ("color")) nil [8426 8704]) ("slime-error-face" variable (:default-value (\` ((((class color) (background light)) (:underline (\, (slime-underline-color "red")))) (((class color) (background dark)) (:underline (\, (slime-underline-color "red")))) (t (:underline t))))) nil [8706 9001]) ("slime-warning-face" variable (:default-value (\` ((((class color) (background light)) (:underline (\, (slime-underline-color "orange")))) (((class color) (background dark)) (:underline (\, (slime-underline-color "coral")))) (t (:underline t))))) nil [9003 9307]) ("slime-style-warning-face" variable (:default-value (\` ((((class color) (background light)) (:underline (\, (slime-underline-color "brown")))) (((class color) (background dark)) (:underline (\, (slime-underline-color "gold")))) (t (:underline t))))) nil [9309 9623]) ("slime-note-face" variable (:default-value (\` ((((class color) (background light)) (:underline (\, (slime-underline-color "brown4")))) (((class color) (background dark)) (:underline (\, (slime-underline-color "light goldenrod")))) (t (:underline t))))) nil [9625 9933]) ("slime-face-inheritance-possible-p" function nil nil [9935 10082]) ("slime-highlight-face" variable (:default-value (if (slime-face-inheritance-possible-p) (quote ((t (:inherit highlight :underline nil)))) (quote ((((class color) (background light)) (:background "darkseagreen2")) (((class color) (background dark)) (:background "darkolivegreen")) (t (:inverse-video t)))))) nil [10084 10467]) ("defgroup" code nil nil [10481 10585]) ("define-sldb-faces" function (:arguments ("&rest" "faces")) nil [10587 10986]) ("define-sldb-face" function (:arguments ("name" "description" "&optional" "default")) nil [10988 11254]) ("define-sldb-faces" code nil nil [11256 12059]) ("defgroup" code nil nil [12079 12196]) ("slime-repl-shortcut-dispatch-char" variable (:default-value 44) nil [12198 12354]) ("slime-repl-only-save-lisp-buffers" variable (:default-value t) nil [12356 12633]) ("slime-repl-return-behaviour" variable (:default-value :send-if-complete) nil [12635 13418]) ("slime-repl-prompt-face" variable (:default-value (if (slime-face-inheritance-possible-p) (quote ((t (:inherit font-lock-keyword-face)))) (quote ((((class color) (background light)) (:foreground "Purple")) (((class color) (background dark)) (:foreground "Cyan")) (t (:weight bold)))))) nil [13423 13764]) ("slime-repl-output-face" variable (:default-value (if (slime-face-inheritance-possible-p) (quote ((t (:inherit font-lock-string-face)))) (quote ((((class color) (background light)) (:foreground "RosyBrown")) (((class color) (background dark)) (:foreground "LightSalmon")) (t (:slant italic)))))) nil [13766 14118]) ("slime-repl-input-face" variable (:default-value (quote ((t (:bold t))))) nil [14120 14238]) ("slime-repl-result-face" variable (:default-value (quote ((t nil)))) nil [14240 14365]) ("slime-repl-history-file" variable (:default-value "~/.slime-history.eld") nil [14367 14511]) ("slime-repl-history-size" variable (:user-visible-flag t :default-value 200) nil [14513 14648]) ("define-minor-mode" code nil nil [14688 16123]) ("make-variable-buffer-local" code nil nil [16125 16294]) ("slime-update-modeline-package" function nil nil [16296 16640]) ("slime-pretty-package-name" function (:arguments ("name")) nil [16642 17003]) ("when" code nil nil [17005 17104]) ("add-to-list" code nil nil [17226 17391]) ("slime-input-complete-p" function (:arguments ("start" "end")) nil [17393 18032]) ("slime-keys" variable (:default-value (quote (("\360" slime-previous-note) ("\356" slime-next-note) ("\343" slime-remove-notes :prefixed t) ("" slime-compile-and-load-file :prefixed t) ("\353" slime-compile-file :prefixed t) ("" slime-compile-defun :prefixed t) ("" slime-load-file :prefixed t) ("\211" slime-complete-symbol :inferior t) ("	" slime-complete-symbol :prefixed t :inferior t) ("\256" slime-edit-definition :inferior t :sldb t) ("4." slime-edit-definition-other-window :inferior t :sldb t) ("5." slime-edit-definition-other-frame :inferior t :sldb t) ("\254" slime-pop-find-definition-stack :inferior t :sldb t) ("" slime-eval-last-expression :inferior t) ("\345" slime-eval-last-expression-display-output :inferior t) ("" slime-pprint-eval-last-expression :prefixed t :inferior t) ("" slime-eval-region :prefixed t :inferior t) ("\230" slime-eval-defun) (":" slime-interactive-eval :prefixed t :sldb t) ("" slime-interactive-eval :prefixed t :sldb t :inferior t) ("" slime-call-defun :prefixed t) ("E" slime-edit-value :prefixed t :sldb t :inferior t) ("" slime-switch-to-output-buffer :prefixed t :sldb t) ("" slime-interrupt :prefixed t :inferior t :sldb t) ("\347" slime-quit :prefixed t :inferior t :sldb t) (" " slime-space :inferior t) ("" slime-describe-function :prefixed t :inferior t :sldb t) ("\344" slime-disassemble-symbol :prefixed t :inferior t :sldb t) ("" slime-toggle-trace-fdefinition :prefixed t :sldb t) ("" slime-undefine-function :prefixed t) ("" slime-macroexpand-1 :prefixed t :inferior t) ("\355" slime-macroexpand-all :prefixed t :inferior t) ("\260" slime-restore-window-configuration :prefixed t :inferior t) ([(control meta 46)] slime-next-location :inferior t) ("~" slime-sync-package-and-default-directory :prefixed t :inferior t) ("\360" slime-repl-set-package :prefixed t :inferior t) ("<" slime-list-callers :prefixed t :inferior t :sldb t) (">" slime-list-callees :prefixed t :inferior t :sldb t) ("I" slime-inspect :prefixed t :inferior t :sldb t) ("" slime-close-all-parens-in-sexp :prefixed t :inferior t :sldb t) ("t" slime-list-threads :prefixed t :inferior t :sldb t) ("c" slime-list-connections :prefixed t :inferior t :sldb t)))) nil [18110 20834]) ("slime-nop" function (:user-visible-flag t) nil [20836 20973]) ("slime-doc-map" variable (:default-value (make-sparse-keymap)) nil [20975 21080]) ("slime-doc-bindings" variable (:default-value (quote ((97 slime-apropos) (122 slime-apropos-all) (112 slime-apropos-package) (100 slime-describe-symbol) (102 slime-describe-function) (104 slime-hyperspec-lookup) (126 common-lisp-hyperspec-format)))) nil [21082 21325]) ("slime-who-map" variable (:default-value (make-sparse-keymap)) nil [21329 21429]) ("slime-who-bindings" variable (:default-value (quote ((99 slime-who-calls) (119 slime-calls-who) (114 slime-who-references) (98 slime-who-binds) (115 slime-who-sets) (109 slime-who-macroexpands) (97 slime-who-specializes)))) nil [21431 21651]) ("slime-prefix-key" variable (:default-value "") nil [21687 21776]) ("slime-define-key" function (:arguments ("key" "command" "&key" "prefixed" "inferior")) nil [21778 22053]) ("slime-init-keymaps" function (:user-visible-flag t) nil [22055 23328]) ("slime-control-modified-char" function (:arguments ("char")) nil [23330 23492]) ("slime-init-keymaps" code nil nil [23494 23514]) ("make-variable-buffer-local" code nil nil [23557 23729]) ("slime-pre-command-hook" function nil nil [23731 23959]) ("slime-post-command-hook" function nil nil [23961 24110]) ("slime-setup-command-hooks" function nil nil [24112 24351]) ("defmacro*" code nil nil [24598 24805]) ("put" code nil nil [24807 24846]) ("with-lexical-bindings" function (:arguments ("variables" "&rest" "body")) nil [24848 25072]) ("put" code nil nil [25074 25126]) ("destructure-case" function (:arguments ("value" "&rest" "patterns")) nil [25128 26124]) ("put" code nil nil [26126 26173]) ("slime-define-keys" function (:arguments ("keymap" "&rest" "key-command")) nil [26175 26388]) ("put" code nil nil [26390 26438]) ("defmacro*" code nil nil [26440 27001]) ("put" code nil nil [27003 27045]) ("slime-message-function" variable (:default-value (quote message)) nil [27083 27123]) ("slime-message" function (:arguments ("format" "&rest" "args")) nil [27138 27333]) ("when" code nil nil [27335 27464]) ("slime-format-display-message" function (:arguments ("format" "&rest" "args")) nil [27466 27592]) ("slime-display-message" function (:arguments ("message" "buffer-name")) nil [27594 28662]) ("slime-create-message-window" function nil nil [28664 29097]) ("slime-background-message-function" variable (:default-value (quote slime-display-oneliner)) nil [29099 29165]) ("slime-background-message" function (:arguments ("format-string" "&rest" "format-args")) nil [29180 29541]) ("slime-display-oneliner" function (:arguments ("format-string" "&rest" "format-args")) nil [29543 29772]) ("slime-oneliner" function (:arguments ("string")) nil [29774 30034]) ("slime-set-truncate-lines" function nil nil [30049 30220]) ("slime-read-package-name" function (:arguments ("prompt" "&optional" "initial-value")) nil [30235 30599]) ("slime-read-symbol-name" function (:arguments ("prompt" "&optional" "query")) nil [30614 31092]) ("slime-propertize-region" function (:arguments ("props" "&rest" "body")) nil [31107 31461]) ("put" code nil nil [31463 31517]) ("slime-insert-propertized" function (:arguments ("props" "&rest" "args")) nil [31532 31708]) ("slime-with-rigid-indentation" function (:arguments ("level" "&rest" "body")) nil [31710 32057]) ("put" code nil nil [32059 32118]) ("slime-indent-rigidly" function (:arguments ("start" "end" "column")) nil [32120 32460]) ("slime-insert-indented" function (:arguments ("&rest" "strings")) nil [32462 32616]) ("slime-curry" function (:arguments ("fun" "&rest" "args")) nil [32618 32714]) ("slime-rcurry" function (:arguments ("fun" "&rest" "args")) nil [32716 32813]) ("slime-narrowing-configuration" type (:members ("narrowedp" "beg" "end") :type "struct") nil [33179 33299]) ("slime-emacs-snapshot" type (:members ("window-configuration" "narrowing-configuration") :type "struct") nil [33301 33417]) ("slime-current-narrowing-configuration" function (:arguments ("&optional" "buffer")) nil [33419 33742]) ("slime-set-narrowing-configuration" function (:arguments ("narrowing-cfg")) nil [33744 34011]) ("slime-current-emacs-snapshot" function (:arguments ("&optional" "frame")) nil [34013 34491]) ("slime-set-emacs-snapshot" function (:arguments ("snapshot")) nil [34493 34909]) ("slime-current-emacs-snapshot-fingerprint" function (:arguments ("&optional" "frame")) nil [34911 35387]) ("slime-frame-windows" function (:arguments ("&optional" "frame")) nil [35389 35683]) ("save-restriction-if-possible" function (:arguments ("&rest" "body")) nil [35686 36819]) ("put" code nil nil [36821 36880]) ("make-variable-buffer-local" code nil nil [36913 37155]) ("make-variable-buffer-local" code nil nil [37157 37304]) ("slime-get-temp-buffer-create" function (:arguments ("name" "&key" "mode" "noselectp" "reusep" "emacs-snapshot")) nil [37319 39330]) ("defmacro*" code nil nil [39345 40357]) ("put" code nil nil [40359 40422]) ("define-minor-mode" code nil nil [40424 40559]) ("slime-temp-buffer-quit" function (:user-visible-flag t :arguments ("&optional" "kill-buffer-p")) nil [40574 41212]) ("slime-to-lisp-filename" function (:arguments ("filename")) nil [41453 41701]) ("slime-from-lisp-filename" function (:arguments ("filename")) nil [41703 41944]) ("slime-find-filename-translators" function (:arguments ("hostname")) nil [41946 42301]) ("inferior-lisp-program" variable (:user-visible-flag t :default-value "lisp") nil [42560 42675]) ("slime-lisp-implementations" variable (:user-visible-flag t) nil [42677 43389]) ("slime-default-lisp" variable (:user-visible-flag t) nil [43391 43505]) ("slime-lisp-host" variable (:default-value "127.0.0.1") nil [43507 43599]) ("slime-net-coding-system" variable nil nil [43639 43671]) ("slime-net-processes" variable nil nil [43672 43700]) ("slime-default-connection" variable nil nil [43701 43734]) ("slime" function (:user-visible-flag t :arguments ("&optional" "command" "coding-system")) nil [43736 44064]) ("slime-inferior-lisp-program-history" variable (:default-value (quote nil)) nil [44066 44169]) ("slime-read-interactive-args" function nil nil [44221 45994]) ("slime-lisp-options" function (:arguments ("&optional" "name")) nil [45996 46522]) ("slime-lookup-lisp-implementation" function (:arguments ("table" "name")) nil [46524 46716]) ("slime-start" function (:arguments ("&key" "program" "program-args" "directory" "coding-system" "init" "name" "buffer" "init-function")) nil [46718 47602]) ("slime-start*" function (:arguments ("options")) nil [47604 47666]) ("slime-connect" function (:user-visible-flag t :arguments ("host" "port" "&optional" "coding-system")) nil [47668 48408]) ("slime-start-and-load" function (:user-visible-flag t :arguments ("filename" "&optional" "package")) nil [48410 48930]) ("slime-start-and-init" function (:arguments ("options" "fun")) nil [48932 49203]) ("slime-load-file-set-package" function (:arguments ("filename" "package")) nil [49205 49535]) ("slime-connect-retry-timer" variable nil nil [50259 50359]) ("slime-bytecode-stale-p" function nil nil [50388 50769]) ("slime-recompile-bytecode" function (:user-visible-flag t) nil [50771 51066]) ("slime-urge-bytecode-recompile" function nil nil [51068 51596]) ("slime-abort-connection" function (:user-visible-flag t) nil [51598 51869]) ("slime-maybe-start-lisp" function (:arguments ("program" "program-args" "directory" "buffer")) nil [51922 52598]) ("slime-reinitialize-inferior-lisp-p" function (:arguments ("program" "program-args" "buffer")) nil [52600 52924]) ("slime-start-lisp" function (:arguments ("program" "program-args" "directory" "buffer")) nil [52926 53414]) ("slime-inferior-connect" function (:arguments ("process" "args")) nil [53416 53646]) ("slime-inferior-lisp-args" variable nil nil [53648 53739]) ("slime-start-swank-server" function (:arguments ("process" "args")) nil [53741 54250]) ("slime-inferior-lisp-args" function (:arguments ("process")) nil [54252 54372]) ("slime-init-command" function (:arguments ("port-filename" "coding-system")) nil [54454 55083]) ("slime-swank-port-file" function nil nil [55085 55430]) ("slime-delete-swank-port-file" function (:arguments ("&optional" "quiet")) nil [55432 55760]) ("slime-read-port-and-connect" function (:arguments ("inferior-process" "retries")) nil [55762 55917]) ("slime-attempt-connection" function (:arguments ("process" "retries" "attempt")) nil [55919 57465]) ("slime-timer-call" function (:arguments ("fun" "&rest" "args")) nil [57471 57771]) ("slime-cancel-connect-retry-timer" function nil nil [57773 57937]) ("slime-read-swank-port" function nil nil [57939 58259]) ("slime-hide-inferior-lisp-buffer" function nil nil [58261 58913]) ("slime-user-first-name" function nil nil [58943 59168]) ("slime-words-of-encouragement" variable (:default-value (\` ("Let the hacking commence!" "Hacks and glory await!" "Hack and be merry!" "Your hacking starts... NOW!" "May the source be with you!" "Take this REPL, brother, and may it serve you well." "Lemonodor-fame is but a hack away!" (\, (format "%s, this could be the start of a beautiful program." (slime-user-first-name)))))) nil [59170 59634]) ("slime-random-words-of-encouragement" function nil nil [59636 59834]) ("slime-net-processes" variable nil nil [60411 60495]) ("slime-net-process-close-hooks" variable (:default-value (quote nil)) nil [60497 60669]) ("slime-secret" function nil nil [60671 61030]) ("slime-net-connect" function (:arguments ("host" "port" "coding-system")) nil [61046 61750]) ("slime-make-net-buffer" function (:arguments ("name")) nil [61752 61956]) ("slime-set-query-on-exit-flag" function (:arguments ("process")) nil [61958 62339]) ("slime-net-valid-coding-systems" variable (:default-value (quote ((iso-latin-1-unix nil "iso-latin-1-unix") (iso-8859-1-unix nil "iso-latin-1-unix") (binary nil "iso-latin-1-unix") (utf-8-unix t "utf-8-unix") (emacs-mule-unix t "emacs-mule-unix") (euc-jp-unix t "euc-jp-unix")))) nil [62370 62766]) ("slime-find-coding-system" function (:arguments ("name")) nil [62768 63185]) ("slime-net-coding-system" variable (:user-visible-flag t :default-value (find-if (quote slime-find-coding-system) (quote (iso-latin-1-unix iso-8859-1-unix binary)))) nil [63187 63404]) ("slime-check-coding-system" function (:user-visible-flag t :arguments ("coding-system")) nil [63408 63881]) ("slime-repl-history-file-coding-system" variable (:user-visible-flag t :default-value (cond ((slime-find-coding-system (quote utf-8-unix)) (quote utf-8-unix)) (t slime-net-coding-system))) nil [63883 64113]) ("slime-coding-system-mulibyte-p" function (:arguments ("coding-system")) nil [64115 64221]) ("slime-coding-system-cl-name" function (:arguments ("coding-system")) nil [64223 64325]) ("slime-net-send" function (:arguments ("sexp" "proc")) nil [64341 64928]) ("slime-safe-encoding-p" function (:arguments ("coding-system" "string")) nil [64930 65468]) ("slime-net-close" function (:arguments ("process" "&optional" "debug")) nil [65470 66009]) ("slime-net-sentinel" function (:arguments ("process" "message")) nil [66011 66191]) ("slime-net-filter" function (:arguments ("process" "string")) nil [66329 66578]) ("slime-run-when-idle" function (:arguments ("function" "&rest" "args")) nil [66580 66783]) ("slime-process-available-input" function (:arguments ("process")) nil [66785 67320]) ("slime-net-have-input-p" function nil nil [67322 67520]) ("slime-net-read-or-lose" function (:arguments ("process")) nil [67522 67708]) ("slime-net-read" function nil nil [67710 68074]) ("slime-net-decode-length" function nil nil [68076 68240]) ("slime-net-encode-length" function (:arguments ("n")) nil [68242 68345]) ("slime-prin1-to-string" function (:arguments ("sexp")) nil [68347 68656]) ("slime-dispatching-connection" variable nil nil [70741 70955]) ("make-variable-buffer-local" code nil nil [70957 71120]) ("slime-default-connection" variable nil nil [71122 71321]) ("slime-current-connection" function nil nil [71323 71547]) ("slime-connection" function nil nil [71551 71991]) ("slime-select-connection" function (:arguments ("process")) nil [71993 72117]) ("defmacro*" code nil nil [72119 72484]) ("put" code nil nil [72486 72545]) ("slime-state-name" variable (:default-value "[??]") nil [72547 72694]) ("slime-set-state" function (:arguments ("name" "&optional" "connection")) nil [72696 73069]) ("slime-def-connection-var" function (:arguments ("varname" "&rest" "initial-value-and-doc")) nil [73104 74055]) ("put" code nil nil [74057 74112]) ("unless" code nil nil [74155 74371]) ("slime-def-connection-var" code nil nil [74373 74504]) ("slime-def-connection-var" code nil nil [74506 74645]) ("slime-def-connection-var" code nil nil [74647 74812]) ("slime-def-connection-var" code nil nil [74814 74984]) ("slime-def-connection-var" code nil nil [74986 75066]) ("slime-def-connection-var" code nil nil [75068 75178]) ("slime-def-connection-var" code nil nil [75180 75293]) ("slime-def-connection-var" code nil nil [75295 75404]) ("slime-def-connection-var" code nil nil [75406 75493]) ("slime-def-connection-var" code nil nil [75495 75600]) ("slime-def-connection-var" code nil nil [75602 75687]) ("slime-def-connection-var" code nil nil [75689 75805]) ("slime-connection-counter" variable nil nil [75831 75939]) ("slime-setup-connection" function (:arguments ("process")) nil [75955 76174]) ("slime-init-connection-state" function (:arguments ("proc")) nil [76176 77055]) ("slime-set-connection-info" function (:arguments ("connection" "info")) nil [77057 78885]) ("slime-generate-connection-name" function (:arguments ("lisp-name")) nil [78887 79163]) ("slime-connection-close-hook" function (:arguments ("process")) nil [79165 79492]) ("add-hook" code nil nil [79494 79564]) ("slime-disconnect" function (:user-visible-flag t) nil [79597 79719]) ("slime-make-default-connection" function (:user-visible-flag t) nil [79721 80016]) ("slime-choose-connection" function nil nil [80018 80523]) ("slime-find-connection-by-name" function (:arguments ("name")) nil [80525 80657]) ("slime-connection-port" function (:arguments ("connection")) nil [80659 80852]) ("slime-process" function (:arguments ("&optional" "connection")) nil [80854 81176]) ("slime-set-inferior-process" function (:arguments ("connection" "process")) nil [81234 81342]) ("slime-use-sigint-for-interrupt" function (:arguments ("&optional" "connection")) nil [81344 81552]) ("slime-inhibit-pipelining" variable (:user-visible-flag t :default-value t) nil [81554 81659]) ("slime-background-activities-enabled-p" function nil nil [81661 82004]) ("make-variable-buffer-local" code nil nil [83787 84013]) ("make-variable-buffer-local" code nil nil [84015 84192]) ("defmacro*" code nil nil [84393 85771]) ("put" code nil nil [85773 85813]) ("slime-current-package" function nil nil [85829 86300]) ("slime-find-buffer-package-function" variable (:user-visible-flag t :default-value (quote slime-search-buffer-package)) nil [86302 86520]) ("slime-find-buffer-package" function nil nil [86522 86678]) ("slime-search-buffer-package" function nil nil [86887 87445]) ("slime-stack-eval-tags" variable nil nil [87692 87788]) ("slime-eval" function (:arguments ("sexp" "&optional" "package")) nil [87790 88848]) ("slime-eval-async" function (:arguments ("sexp" "&optional" "cont" "package")) nil [88850 89215]) ("slime-connected-p" function nil nil [89256 89368]) ("slime-check-connected" function nil nil [89370 89590]) ("slime-busy-p" function nil nil [89592 89893]) ("slime-repl-read-mode" variable nil nil [89924 89953]) ("slime-reading-p" function nil nil [89955 90111]) ("slime-sync" function nil nil [90113 90382]) ("slime-ping" function (:user-visible-flag t) nil [90384 90494]) ("slime-def-connection-var" code nil nil [90941 91062]) ("slime-def-connection-var" code nil nil [91064 91159]) ("slime-event-hooks" variable nil nil [91161 91187]) ("slime-dispatch-event" function (:arguments ("event" "&optional" "process")) nil [91189 94414]) ("slime-send" function (:arguments ("sexp")) nil [94416 94548]) ("slime-reset" function (:user-visible-flag t) nil [94550 94702]) ("slime-send-sigint" function nil nil [94704 94787]) ("slime-log-events" variable (:user-visible-flag t :default-value t) nil [95033 95115]) ("slime-outline-mode-in-events-buffer" variable (:user-visible-flag t) nil [95117 95220]) ("slime-event-buffer-name" variable (:default-value "*slime-events*") nil [95222 95311]) ("slime-log-event" function (:arguments ("event")) nil [95313 95875]) ("slime-pprint-event" function (:arguments ("event" "buffer")) nil [95877 96072]) ("slime-events-buffer" function nil nil [96074 96523]) ("slime-def-connection-var" code nil nil [96547 96667]) ("make-variable-buffer-local" code nil nil [96669 96790]) ("make-variable-buffer-local" code nil nil [96792 96919]) ("slime-repl-package-stack" variable nil nil [96959 96992]) ("slime-repl-directory-stack" variable nil nil [96993 97028]) ("slime-repl-input-start-mark" variable nil nil [97029 97065]) ("slime-repl-prompt-start-mark" variable nil nil [97066 97103]) ("slime-output-buffer" function (:arguments ("&optional" "noprompt")) nil [97106 97800]) ("slime-repl-banner-function" variable (:default-value (quote slime-repl-insert-banner)) nil [97802 97863]) ("slime-repl-update-banner" function nil nil [97865 98084]) ("slime-repl-insert-banner" function nil nil [98086 98316]) ("slime-init-output-buffer" function (:arguments ("connection")) nil [98318 98568]) ("slime-show-last-output-function" variable (:user-visible-flag t :default-value (quote slime-maybe-display-output-buffer)) nil [98570 98808]) ("slime-show-last-output-region" function (:arguments ("start" "end")) nil [98810 99005]) ("slime-maybe-display-output-buffer" function (:arguments ("start" "end")) nil [99007 99240]) ("slime-show-last-output" function nil nil [99242 99502]) ("slime-display-output-buffer" function nil nil [99504 99799]) ("slime-with-output-end-mark" function (:arguments ("&rest" "body")) nil [99801 100721]) ("slime-output-filter" function (:arguments ("process" "string")) nil [100723 100958]) ("slime-open-stream-hooks" variable nil nil [100960 100992]) ("slime-open-stream-to-lisp" function (:arguments ("port")) nil [100994 101625]) ("slime-io-speed-test" function (:user-visible-flag t :arguments ("&optional" "profile")) nil [101627 102480]) ("slime-write-string-function" variable (:default-value (quote slime-repl-write-string)) nil [102482 102543]) ("slime-write-string" function (:arguments ("string" "&optional" "target")) nil [102545 102978]) ("slime-repl-write-string" function (:arguments ("string" "&optional" "target")) nil [102980 103183]) ("slime-repl-emit" function (:arguments ("string")) nil [103185 103819]) ("slime-repl-emit-result" function (:arguments ("string")) nil [103821 104214]) ("slime-last-output-target-id" variable nil nil [104216 104299]) ("slime-output-target-to-marker" variable (:default-value (make-hash-table)) nil [104301 104455]) ("slime-output-target-marker" function (:arguments ("target")) nil [104457 104830]) ("slime-emit-string" function (:arguments ("string" "target")) nil [104832 105333]) ("slime-switch-to-output-buffer" function (:user-visible-flag t :arguments ("&optional" "connection")) nil [105335 105812]) ("slime-make-variables-buffer-local" function (:arguments ("&rest" "variables")) nil [108182 108291]) ("slime-make-variables-buffer-local" code nil nil [108293 108880]) ("slime-reset-repl-markers" function nil nil [108882 109457]) ("slime-repl-mode-map" variable nil nil [109482 109510]) ("setq" code nil nil [109512 109559]) ("set-keymap-parent" code nil nil [109560 109613]) ("dolist" code nil nil [109615 109893]) ("slime-define-keys" code nil nil [109895 111105]) ("slime-repl-mode" function (:user-visible-flag t) nil [111107 112276]) ("slime-repl-buffer" function (:arguments ("&optional" "create" "connection")) nil [112278 112534]) ("slime-repl" function nil nil [112536 112607]) ("slime-repl-mode-beginning-of-defun" function nil nil [112609 112689]) ("slime-repl-mode-end-of-defun" function nil nil [112691 112761]) ("slime-repl-send-string" function (:arguments ("string" "&optional" "command-string")) nil [112763 112946]) ("slime-repl-eval-string" function (:arguments ("string")) nil [112948 113170]) ("slime-repl-insert-result" function (:arguments ("result")) nil [113172 113718]) ("slime-repl-show-abort" function nil nil [113720 113968]) ("slime-repl-insert-prompt" function nil nil [113970 114902]) ("slime-repl-show-maximum-output" function (:arguments ("&optional" "force")) nil [114904 115160]) ("slime-repl-current-input-hooks" variable nil nil [115162 115201]) ("slime-repl-current-input" function (:arguments ("&optional" "until-point-p")) nil [115203 115703]) ("slime-property-position" function (:arguments ("text-property" "&optional" "object")) nil [115705 115940]) ("slime-mark-input-start" function nil nil [115944 116219]) ("slime-mark-output-start" function (:arguments ("&optional" "position")) nil [116221 116404]) ("slime-mark-output-end" function nil nil [116406 116735]) ("slime-repl-bol" function (:user-visible-flag t) nil [116737 117068]) ("slime-repl-eol" function (:user-visible-flag t) nil [117070 117365]) ("slime-preserve-zmacs-region" function nil nil [117367 117552]) ("slime-repl-in-input-area-p" function nil nil [117554 117688]) ("slime-repl-at-prompt-start-p" function nil nil [117690 117819]) ("slime-repl-beginning-of-defun" function (:user-visible-flag t) nil [117821 118323]) ("slime-repl-end-of-defun" function (:user-visible-flag t) nil [118325 118608]) ("slime-repl-at-prompt-end-p" function nil nil [118677 118842]) ("slime-repl-find-prompt" function (:arguments ("move")) nil [118845 119088]) ("slime-search-property-change-fn" function (:arguments ("prop" "&optional" "backward")) nil [119090 119415]) ("slime-repl-previous-prompt" function (:user-visible-flag t) nil [119417 119598]) ("slime-repl-next-prompt" function (:user-visible-flag t) nil [119600 119769]) ("slime-repl-return-hooks" variable nil nil [119771 119803]) ("slime-repl-return" function (:user-visible-flag t :arguments ("&optional" "end-of-input")) nil [119805 121061]) ("slime-repl-recenter-if-needed" function nil nil [121063 121308]) ("slime-repl-send-input" function (:arguments ("&optional" "newline")) nil [121310 122525]) ("slime-repl-grab-old-input" function (:arguments ("replace")) nil [122527 123389]) ("slime-property-bounds" function (:arguments ("prop")) nil [123391 124567]) ("slime-repl-closing-return" function (:user-visible-flag t) nil [124569 124904]) ("slime-repl-newline-and-indent" function (:user-visible-flag t) nil [124906 125293]) ("slime-repl-delete-current-input" function nil nil [125295 125409]) ("slime-repl-kill-input" function (:user-visible-flag t) nil [125411 125742]) ("slime-repl-replace-input" function (:arguments ("string")) nil [125744 125851]) ("slime-repl-input-line-beginning-position" function nil nil [125853 125997]) ("slime-repl-clear-buffer-hook" variable nil nil [125999 126036]) ("slime-repl-clear-buffer" function (:user-visible-flag t) nil [126038 126388]) ("slime-repl-clear-output" function (:user-visible-flag t) nil [126390 126930]) ("slime-indent-and-complete-symbol" function (:user-visible-flag t) nil [126932 127578]) ("slime-repl-set-package" function (:user-visible-flag t :arguments ("package")) nil [127580 128151]) ("slime-repl-wrap-history" variable (:user-visible-flag t) nil [128170 128302]) ("make-variable-buffer-local" code nil nil [128304 128427]) ("slime-repl-add-to-input-history" function (:arguments ("string")) nil [128429 128693]) ("slime-repl-input-history-position" variable (:default-value -1) nil [128867 128950]) ("slime-repl-history-pattern" variable nil nil [128952 129052]) ("slime-repl-history-replace" function (:arguments ("direction" "&optional" "regexp" "delete-at-end-p")) nil [129054 130743]) ("slime-repl-history-search-in-progress-p" function nil nil [130745 130843]) ("slime-repl-terminate-history-search" function nil nil [130845 130926]) ("slime-repl-position-in-history" function (:arguments ("start-pos" "direction" "regexp")) nil [130928 131544]) ("slime-repl-previous-input" function (:user-visible-flag t) nil [131546 131867]) ("slime-repl-next-input" function (:user-visible-flag t) nil [131869 132065]) ("slime-repl-forward-input" function (:user-visible-flag t) nil [132067 132231]) ("slime-repl-backward-input" function (:user-visible-flag t) nil [132233 132400]) ("slime-repl-previous-matching-input" function (:arguments ("regexp")) nil [132402 132597]) ("slime-repl-next-matching-input" function (:arguments ("regexp")) nil [132599 132785]) ("slime-repl-history-pattern" function (:arguments ("&optional" "use-current-input")) nil [132787 133192]) ("slime-repl-delete-from-input-history" function (:user-visible-flag t :arguments ("string")) nil [133194 133847]) ("slime-repl-merge-histories" function (:arguments ("old-hist" "new-hist")) nil [133876 134316]) ("slime-repl-load-history" function (:user-visible-flag t :arguments ("&optional" "filename")) nil [134318 134690]) ("slime-repl-read-history" function (:arguments ("&optional" "filename" "noerrer")) nil [134692 135143]) ("slime-repl-read-history-filename" function nil nil [135145 135287]) ("slime-repl-save-merged-history" function (:user-visible-flag t :arguments ("&optional" "filename")) nil [135289 135940]) ("slime-repl-save-history" function (:user-visible-flag t :arguments ("&optional" "filename" "history")) nil [135942 137187]) ("slime-repl-save-all-histories" function nil nil [137189 137420]) ("slime-repl-safe-save-merged-history" function nil nil [137422 137583]) ("slime-repl-safe-load-history" function nil nil [137585 137733]) ("slime-repl-call-with-handler" function (:arguments ("fun" "query")) nil [137735 138075]) ("define-key" code nil nil [138101 138206]) ("define-minor-mode" code nil nil [138208 138446]) ("make-variable-buffer-local" code nil nil [138448 138516]) ("make-variable-buffer-local" code nil nil [138518 138583]) ("slime-repl-read-string" function (:arguments ("thread" "tag")) nil [138585 138846]) ("slime-y-or-n-p" function (:arguments ("thread" "tag" "question")) nil [138848 138968]) ("slime-repl-return-string" function (:arguments ("string")) nil [138970 139238]) ("slime-repl-read-break" function nil nil [139240 139366]) ("slime-repl-abort-read" function (:arguments ("thread" "tag")) nil [139368 139584]) ("slime-repl-shortcut" type (:members ("symbol" "names" "handler" "one-liner") :type "struct") nil [139609 139709]) ("slime-repl-shortcut-table" variable nil nil [139711 139784]) ("slime-repl-shortcut-history" variable (:default-value (quote nil)) nil [139786 139870]) ("slime-handle-repl-shortcut" function nil nil [139872 140464]) ("slime-list-all-repl-shortcuts" function nil nil [140466 140609]) ("slime-lookup-shortcut" function (:arguments ("name")) nil [140611 140753]) ("defslime-repl-shortcut" function (:arguments ("elisp-name" "names" "&rest" "options")) nil [140755 141730]) ("slime-list-repl-short-cuts" function nil nil [141732 142476]) ("slime-save-some-lisp-buffers" function nil nil [142478 142764]) ("defslime-repl-shortcut" code nil nil [142768 142906]) ("defslime-repl-shortcut" code nil nil [142908 143056]) ("defslime-repl-shortcut" code nil nil [143058 143306]) ("defslime-repl-shortcut" code nil nil [143308 143867]) ("defslime-repl-shortcut" code nil nil [143869 144265]) ("defslime-repl-shortcut" code nil nil [144267 144419]) ("defslime-repl-shortcut" code nil nil [144421 144777]) ("defslime-repl-shortcut" code nil nil [144779 145147]) ("defslime-repl-shortcut" code nil nil [145149 145419]) ("defslime-repl-shortcut" code nil nil [145421 145558]) ("defslime-repl-shortcut" code nil nil [145560 145847]) ("defslime-repl-shortcut" code nil nil [145849 145968]) ("defslime-repl-shortcut" code nil nil [145970 146448]) ("defslime-repl-shortcut" code nil nil [146450 147014]) ("defslime-repl-shortcut" code nil nil [147016 147175]) ("slime-restart-inferior-lisp" function nil nil [147177 147451]) ("slime-restart-sentinel" function (:arguments ("process" "message")) nil [147455 148544]) ("slime-kill-all-buffers" function nil nil [148576 149092]) ("slime-highlight-compiler-notes" variable (:user-visible-flag t :default-value t) nil [149160 149264]) ("slime-display-compilation-output" variable (:default-value t) nil [149266 149454]) ("slime-before-compile-functions" variable nil nil [149456 149666]) ("slime-compilation-finished-hook" variable (:default-value (quote slime-maybe-list-compiler-notes)) nil [149668 149977]) ("slime-goto-first-note-after-compilation" variable nil nil [149979 150170]) ("slime-compile-and-load-file" function (:user-visible-flag t) nil [150172 150579]) ("slime-compile-file" function (:user-visible-flag t :arguments ("&optional" "load")) nil [150581 151573]) ("slime-compile-defun" function (:user-visible-flag t) nil [151575 151727]) ("slime-compile-region" function (:user-visible-flag t :arguments ("start" "end")) nil [151729 151952]) ("slime-compile-string" function (:arguments ("string" "start-offset")) nil [151954 152253]) ("slime-note-count-string" function (:arguments ("severity" "count" "&optional" "suppress-if-zero")) nil [152255 152462]) ("slime-show-note-counts" function (:arguments ("notes" "&optional" "secs")) nil [152464 153177]) ("slime-xrefs-for-notes" function (:arguments ("notes")) nil [153179 153748]) ("slime-one-line-ify" function (:arguments ("string")) nil [153750 154066]) ("slime-compilation-finished" function (:arguments ("result" "buffer" "&optional" "emacs-snapshot")) nil [154068 154521]) ("slime-make-compilation-finished-continuation" function (:arguments ("current-buffer" "&optional" "emacs-snapshot")) nil [154523 154765]) ("slime-highlight-notes" function (:user-visible-flag t :arguments ("notes")) nil [154767 155189]) ("slime-compiler-notes" function nil nil [155191 155324]) ("slime-remove-old-overlays" function nil nil [155326 155894]) ("slime-filter-buffers" function (:arguments ("predicate")) nil [155896 156190]) ("slime-merge-notes-for-display" function (:arguments ("notes")) nil [156255 156536]) ("slime-merge-notes" function (:arguments ("notes")) nil [156538 157006]) ("slime-intersperse" function (:arguments ("element" "list")) nil [157032 157238]) ("slime-notes-in-same-location-p" function (:arguments ("a" "b")) nil [157240 157342]) ("slime-group-similar" function (:arguments ("similar-p" "list")) nil [157344 157842]) ("slime-maybe-show-xrefs-for-notes" function (:arguments ("&optional" "notes" "emacs-snapshot")) nil [157873 158286]) ("slime-note-has-location-p" function (:arguments ("note")) nil [158288 158382]) ("slime-maybe-list-compiler-notes" function (:arguments ("notes" "&optional" "emacs-snapshot")) nil [158384 158694]) ("slime-list-compiler-notes" function (:user-visible-flag t :arguments ("notes" "&optional" "emacs-snapshot")) nil [158696 159440]) ("slime-alistify" function (:arguments ("list" "key" "test")) nil [159442 159951]) ("slime-note.severity" function (:arguments ("note")) nil [159953 160016]) ("slime-note.message" function (:arguments ("note")) nil [160018 160079]) ("slime-note.short-message" function (:arguments ("note")) nil [160081 160191]) ("slime-note.location" function (:arguments ("note")) nil [160193 160256]) ("slime-severity-label" function (:arguments ("severity")) nil [160258 160454]) ("slime-tree-printer" variable (:default-value (quote slime-tree-default-printer)) nil [160456 160511]) ("slime-tree-for-note" function (:arguments ("note")) nil [160513 160691]) ("slime-tree-for-severity" function (:arguments ("severity" "notes" "collapsed-p")) nil [160693 161018]) ("slime-compiler-notes-to-tree" function (:arguments ("notes")) nil [161020 161338]) ("slime-compiler-notes-mode-map" variable nil nil [161340 161378]) ("define-derived-mode" code nil nil [161380 161566]) ("slime-define-keys" code nil nil [161568 161791]) ("slime-compiler-notes-default-action-or-show-details/mouse" function (:user-visible-flag t :arguments ("event")) nil [161793 162235]) ("slime-compiler-notes-default-action-or-show-details" function (:user-visible-flag t) nil [162237 162505]) ("slime-compiler-notes-show-details" function nil nil [162507 162859]) ("slime-tree" type (:members ("item" "print-fn" "kids" "collapsed-p" "prefix" "start-mark" "end-mark" "plist") :type "struct") nil [162883 163140]) ("slime-tree-leaf-p" function (:arguments ("tree")) nil [163142 163205]) ("slime-tree-default-printer" function (:arguments ("tree")) nil [163207 163298]) ("slime-tree-decoration" function (:arguments ("tree")) nil [163300 163430]) ("slime-tree-insert-list" function (:arguments ("list" "prefix")) nil [163432 163744]) ("slime-tree-insert-decoration" function (:arguments ("tree")) nil [163746 163829]) ("slime-tree-indent-item" function (:arguments ("start" "end" "prefix")) nil [163831 164146]) ("slime-tree-insert" function (:arguments ("tree" "prefix")) nil [164148 164870]) ("slime-tree-at-point" function nil nil [164872 164992]) ("slime-tree-delete" function (:arguments ("tree")) nil [164994 165149]) ("slime-tree-toggle" function (:arguments ("tree")) nil [165151 165535]) ("slime-overlay-note" function (:arguments ("note")) nil [165576 166242]) ("slime-create-note-overlay" function (:arguments ("note" "start" "end" "severity" "message")) nil [166244 167084]) ("slime-merge-note-into-overlay" function (:arguments ("overlay" "severity" "message")) nil [167285 167784]) ("slime-choose-overlay-region" function (:arguments ("note")) nil [167786 168665]) ("slime-choose-overlay-for-sexp" function (:arguments ("location")) nil [168677 169089]) ("slime-same-line-p" function (:arguments ("pos1" "pos2")) nil [169091 169303]) ("slime-severity-face" function (:arguments ("severity")) nil [169305 169631]) ("slime-most-severe" function (:arguments ("sev1" "sev2")) nil [169633 170020]) ("slime-visit-source-path" function (:arguments ("source-path")) nil [170046 170218]) ("slime-forward-positioned-source-path" function (:arguments ("source-path")) nil [170220 170628]) ("slime-forward-source-path" function (:arguments ("source-path")) nil [170630 171044]) ("slime-filesystem-toplevel-directory" function nil nil [171046 171335]) ("slime-file-name-merge-source-root" function (:arguments ("target-filename" "buffer-filename")) nil [171337 173231]) ("slime-highlight-differences-in-dirname" function (:arguments ("base-dirname" "contrast-dirname")) nil [173233 174441]) ("slime-warn-when-possibly-tricked-by-M-." variable (:default-value t) nil [174443 175447]) ("slime-maybe-warn-for-different-source-root" function (:arguments ("target-filename" "buffer-filename")) nil [175449 176221]) ("slime-goto-location-buffer" function (:arguments ("buffer")) nil [176224 177953]) ("slime-goto-location-position" function (:arguments ("position")) nil [177955 179489]) ("slime-search-method-location" function (:arguments ("name" "specializers" "qualifiers")) nil [179491 180842]) ("slime-search-call-site" function (:arguments ("fname")) nil [180844 181301]) ("slime-goto-source-location" function (:arguments ("location" "&optional" "noerror")) nil [181303 182457]) ("slime-point-moves-p" function (:arguments ("&rest" "body")) nil [182459 182710]) ("put" code nil nil [182712 182762]) ("slime-forward-sexp" function (:arguments ("&optional" "count")) nil [182764 183117]) ("slime-forward-blanks" function nil nil [183119 183414]) ("slime-forward-reader-comment" function nil nil [183545 183969]) ("slime-forward-reader-conditional" function nil nil [183971 184413]) ("slime-keywordify" function (:arguments ("symbol")) nil [184415 184637]) ("slime-eval-feature-conditional" function (:arguments ("e")) nil [184639 185032]) ("slime-isearch" function (:arguments ("string")) nil [185270 186173]) ("slime-isearch-with-function" function (:arguments ("search-fn" "string")) nil [186175 187042]) ("slime-compilation-just-finished" variable nil nil [187108 187271]) ("make-variable-buffer-local" code nil nil [187272 187333]) ("slime-next-note" function (:user-visible-flag t) nil [187335 187831]) ("slime-previous-note" function (:user-visible-flag t) nil [187833 188345]) ("slime-remove-notes" function (:user-visible-flag t) nil [188347 188484]) ("slime-show-note" function (:arguments ("overlay")) nil [188486 188749]) ("slime-temporarily-highlight-note" function (:arguments ("overlay")) nil [188751 189312]) ("slime-note-at-point" function nil nil [189349 189516]) ("slime-note-overlay-p" function (:arguments ("overlay")) nil [189518 189642]) ("slime-note-overlays-at-point" function nil nil [189644 189810]) ("slime-find-next-note" function nil nil [189812 190003]) ("slime-find-previous-note" function nil nil [190005 190200]) ("slime-find-note" function (:arguments ("next-candidate-fn")) nil [190202 190574]) ("slime-space" function (:user-visible-flag t :arguments ("n")) nil [190600 190960]) ("slime-echo-arglist-function" variable (:default-value (quote slime-show-arglist)) nil [190962 191018]) ("slime-echo-arglist" function nil nil [191020 191151]) ("slime-show-arglist" function nil nil [191153 191400]) ("slime-operator-before-point" function nil nil [191402 191562]) ("slime-completions-buffer-name" variable (:default-value "*Completions*") nil [191672 191726]) ("make-variable-buffer-local" code nil nil [191728 191949]) ("make-variable-buffer-local" code nil nil [191951 192230]) ("slime-complete-maybe-save-window-configuration" function nil nil [192232 192604]) ("slime-complete-delay-restoration" function nil nil [192606 192781]) ("slime-complete-forget-window-configuration" function nil nil [192783 192929]) ("slime-complete-restore-window-configuration" function nil nil [192931 193686]) ("slime-complete-maybe-restore-window-configuration" function nil nil [193688 194447]) ("slime-completion-window-active-p" function nil nil [194449 194702]) ("slime-display-completion-list" function (:arguments ("completions" "base")) nil [194704 195247]) ("slime-display-or-scroll-completions" function (:arguments ("completions" "base")) nil [195251 195553]) ("slime-scroll-completions" function nil nil [195555 195873]) ("slime-complete-symbol" function (:user-visible-flag t) nil [195875 196062]) ("slime-simple-complete-symbol" function nil nil [196064 197293]) ("slime-maybe-complete-as-filename" function nil nil [197295 197744]) ("slime-minibuffer-respecting-message" function (:arguments ("format" "&rest" "format-args")) nil [197746 198178]) ("slime-read-expression-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "	" (quote slime-complete-symbol)) (define-key map "\211" (quote slime-complete-symbol)) map)) nil [198180 198464]) ("slime-read-expression-history" variable (:default-value (quote nil)) nil [198466 198566]) ("slime-read-from-minibuffer" function (:arguments ("prompt" "&optional" "initial-value")) nil [198569 199352]) ("slime-bogus-completion-alist" function (:arguments ("list")) nil [199354 199628]) ("slime-simple-completions" function (:arguments ("prefix")) nil [199630 199748]) ("slime-find-definition-history-ring" variable (:default-value (make-ring 20)) nil [199774 199893]) ("slime-push-definition-stack" function (:arguments ("&optional" "marker" "narrowing-configuration")) nil [199895 200402]) ("slime-pop-find-definition-stack" function (:user-visible-flag t) nil [200404 201315]) ("slime-definition" type (:members ("dspec" "location") :type "struct") nil [201317 201437]) ("slime-edit-definition" function (:user-visible-flag t :arguments ("name" "&optional" "where")) nil [201439 202349]) ("slime-find-tag-if-tags-table-visited" function (:arguments ("name")) nil [202351 202683]) ("slime-goto-definition" function (:arguments ("name" "definitions" "&optional" "where")) nil [202685 204001]) ("slime-goto-definition-other-window" function (:arguments ("definition")) nil [204003 204196]) ("slime-pop-to-other-window" function nil nil [204198 204334]) ("slime-edit-definition-other-window" function (:user-visible-flag t :arguments ("name")) nil [204336 204548]) ("slime-edit-definition-other-frame" function (:user-visible-flag t :arguments ("name")) nil [204550 204760]) ("slime-edit-definition-with-etags" function (:arguments ("name")) nil [204762 205098]) ("slime-etags-definitions" function (:arguments ("name")) nil [205100 205998]) ("slime-show-definitions" function (:arguments ("name" "definitions")) nil [206000 206232]) ("slime-first-change-hook" function nil nil [206259 206835]) ("slime-setup-first-change-hook" function nil nil [206837 206968]) ("add-hook" code nil nil [206970 207028]) ("slime-eval-for-lisp" function (:arguments ("thread" "tag" "form-string")) nil [207052 207483]) ("slime-check-eval-in-emacs-enabled" function nil nil [207485 207749]) ("slime-ed-frame" variable nil nil [207764 207825]) ("slime-ed-use-dedicated-frame" variable (:user-visible-flag t :default-value t) nil [207827 207978]) ("slime-ed" function (:arguments ("what")) nil [207980 209415]) ("slime-interactive-eval" function (:user-visible-flag t :arguments ("string")) nil [209492 210020]) ("slime-display-eval-result" function (:arguments ("value")) nil [210022 210092]) ("slime-eval-print" function (:arguments ("string")) nil [210094 210528]) ("slime-eval-with-transcript" function (:arguments ("form" "&optional" "fn")) nil [210530 211201]) ("slime-eval-describe" function (:arguments ("form")) nil [211203 211456]) ("slime-insert-transcript-delimiter" function (:arguments ("string")) nil [211458 211929]) ("slime-display-buffer-region" function (:arguments ("buffer" "start" "end" "&optional" "other-window")) nil [211931 212649]) ("slime-last-expression" function nil nil [212653 212775]) ("slime-eval-last-expression" function (:user-visible-flag t) nil [212777 212926]) ("slime-eval-last-expression-display-output" function (:user-visible-flag t) nil [212928 213150]) ("slime-eval-defun" function (:user-visible-flag t) nil [213154 213485]) ("slime-eval-region" function (:user-visible-flag t :arguments ("start" "end")) nil [213487 213682]) ("slime-eval-buffer" function (:user-visible-flag t) nil [213684 213846]) ("slime-re-evaluate-defvar" function (:user-visible-flag t :arguments ("form")) nil [213848 214126]) ("slime-pprint-eval-last-expression" function (:user-visible-flag t) nil [214128 214324]) ("slime-eval-print-last-expression" function (:user-visible-flag t :arguments ("string")) nil [214326 214534]) ("slime-call-defun" function (:user-visible-flag t) nil [214536 215177]) ("slime-edit-value" function (:user-visible-flag t :arguments ("form-string")) nil [215204 215933]) ("make-variable-buffer-local" code nil nil [215935 216050]) ("define-minor-mode" code nil nil [216052 216188]) ("slime-edit-value-callback" function (:arguments ("form-string" "current-value" "package")) nil [216190 216711]) ("slime-edit-value-commit" function (:user-visible-flag t) nil [216713 217331]) ("slime-redirect-trace-output" function (:user-visible-flag t) nil [217348 218244]) ("slime-untrace-all" function (:user-visible-flag t) nil [218246 218353]) ("slime-toggle-trace-fdefinition" function (:user-visible-flag t :arguments ("&optional" "using-context-p")) nil [218355 218693]) ("slime-trace-query" function (:arguments ("spec")) nil [218695 220629]) ("slime-extract-context" function nil nil [220631 221569]) ("slime-parse-context" function (:arguments ("name")) nil [221571 223235]) ("slime-in-expression-p" function (:arguments ("pattern")) nil [223237 224067]) ("slime-pattern-path" function (:arguments ("pattern")) nil [224069 224508]) ("slime-beginning-of-list" function (:arguments ("&optional" "up")) nil [224510 224751]) ("slime-parse-toplevel-form" function nil nil [224753 224922]) ("slime-arglist-specializers" function (:arguments ("arglist")) nil [224927 225254]) ("slime-disassemble-symbol" function (:user-visible-flag t :arguments ("symbol-name")) nil [225256 225476]) ("slime-undefine-function" function (:user-visible-flag t :arguments ("symbol-name")) nil [225478 225755]) ("slime-load-file" function (:user-visible-flag t :arguments ("filename")) nil [225757 226193]) ("slime-toggle-profile-fdefinition" function (:user-visible-flag t :arguments ("fname-string")) nil [226215 226572]) ("slime-unprofile-all" function (:user-visible-flag t) nil [226574 226743]) ("slime-profile-report" function (:user-visible-flag t) nil [226745 226873]) ("slime-profile-reset" function (:user-visible-flag t) nil [226875 227056]) ("slime-profiled-functions" function (:user-visible-flag t) nil [227058 227266]) ("slime-profile-package" function (:user-visible-flag t :arguments ("package" "callers" "methods")) nil [227268 227855]) ("slime-hyperspec-lookup" function (:user-visible-flag t :arguments ("symbol-name")) nil [227880 228854]) ("slime-show-description" function (:arguments ("string" "package")) nil [228858 228995]) ("slime-describe-symbol" function (:user-visible-flag t :arguments ("symbol-name")) nil [228997 229261]) ("slime-documentation" function (:user-visible-flag t :arguments ("symbol-name")) nil [229263 229591]) ("slime-describe-function" function (:arguments ("symbol-name")) nil [229593 229827]) ("slime-apropos-summary" function (:arguments ("string" "case-sensitive-p" "package" "only-external-p")) nil [229829 230204]) ("slime-apropos" function (:user-visible-flag t :arguments ("string" "&optional" "only-external-p" "package" "case-sensitive-p")) nil [230206 231250]) ("slime-apropos-all" function (:user-visible-flag t) nil [231252 231405]) ("slime-apropos-package" function (:user-visible-flag t :arguments ("package" "&optional" "internal")) nil [231407 231793]) ("slime-show-apropos" function (:arguments ("plists" "string" "package" "summary")) nil [231795 232272]) ("slime-apropos-label-properties" variable (:default-value (progn (require (quote apropos)) (cond ((and (boundp (quote apropos-label-properties)) (symbol-value (quote apropos-label-properties)))) ((boundp (quote apropos-label-face)) (etypecase (symbol-value (quote apropos-label-face)) (symbol (\` (face (\, (or (symbol-value (quote apropos-label-face)) (quote italic))) mouse-face highlight))) (list (symbol-value (quote apropos-label-face)))))))) nil [232274 232773]) ("apropos" include nil nil [232794 232812]) ("slime-print-apropos" function (:arguments ("plists")) nil [232815 234359]) ("slime-call-describer" function (:arguments ("arg")) nil [234361 234612]) ("slime-xref-mode-map" variable nil nil [234646 234674]) ("slime-xref-saved-emacs-snapshot" variable nil nil [234675 234762]) ("define-derived-mode" code nil nil [234764 235215]) ("slime-define-keys" code nil nil [235217 235433]) ("slime-next-line/not-add-newlines" function nil nil [235435 235551]) ("dolist" code nil nil [235603 235845]) ("slime-xref-buffer" function nil nil [235898 236140]) ("slime-init-xref-buffer" function (:arguments ("package" "ref-type" "symbol")) nil [236142 236399]) ("slime-display-xref-buffer" function nil nil [236425 236777]) ("defmacro*" code nil nil [236779 237977]) ("put" code nil nil [237979 238032]) ("slime-insert-xrefs" function (:arguments ("xrefs")) nil [238034 239061]) ("slime-next-location-function" variable nil nil [239063 239157]) ("slime-show-xrefs" function (:arguments ("xrefs" "type" "symbol" "package" "&optional" "emacs-snapshot")) nil [239159 239609]) ("slime-who-calls" function (:user-visible-flag t :arguments ("symbol")) nil [239634 239810]) ("slime-calls-who" function (:user-visible-flag t :arguments ("symbol")) nil [239812 240001]) ("slime-who-references" function (:user-visible-flag t :arguments ("symbol")) nil [240003 240203]) ("slime-who-binds" function (:user-visible-flag t :arguments ("symbol")) nil [240205 240388]) ("slime-who-sets" function (:user-visible-flag t :arguments ("symbol")) nil [240390 240570]) ("slime-who-macroexpands" function (:user-visible-flag t :arguments ("symbol")) nil [240572 240768]) ("slime-who-specializes" function (:user-visible-flag t :arguments ("symbol")) nil [240770 240969]) ("slime-list-callers" function (:user-visible-flag t :arguments ("symbol-name")) nil [240971 241166]) ("slime-list-callees" function (:user-visible-flag t :arguments ("symbol-name")) nil [241168 241363]) ("slime-xref" function (:arguments ("type" "symbol")) nil [241365 241947]) ("slime-xref-location-at-point" function nil nil [241974 242287]) ("slime-goto-xref" function (:user-visible-flag t) nil [242289 242539]) ("slime-show-xref" function (:user-visible-flag t) nil [242541 242728]) ("slime-goto-next-xref" function nil nil [242736 243446]) ("slime-next-location" function (:user-visible-flag t) nil [243448 243746]) ("slime-xref-quit" function (:user-visible-flag t) nil [243748 243979]) ("slime-xref-cleanup" function nil nil [243981 244194]) ("define-minor-mode" code nil nil [244219 244396]) ("flet" code nil nil [244398 244960]) ("slime-sexp-at-point-for-macroexpansion" function nil nil [244962 245975]) ("slime-eval-macroexpand-expression" variable nil nil [245977 246130]) ("slime-eval-macroexpand" function (:arguments ("expander" "&optional" "string")) nil [246132 246783]) ("slime-eval-macroexpand-inplace" function (:user-visible-flag t :arguments ("expander")) nil [246785 247736]) ("slime-macroexpand-1" function (:user-visible-flag t :arguments ("&optional" "repeatedly")) nil [247738 248060]) ("slime-macroexpand-1-inplace" function (:arguments ("&optional" "repeatedly")) nil [248062 248246]) ("slime-macroexpand-all" function (:user-visible-flag t) nil [248248 248410]) ("slime-macroexpand-all-inplace" function (:user-visible-flag t) nil [248412 248590]) ("slime-compiler-macroexpand" function (:user-visible-flag t) nil [248592 248765]) ("slime-compiler-macroexpand-1" function (:user-visible-flag t) nil [248767 248944]) ("slime-macroexpand-again" function (:user-visible-flag t) nil [248946 249173]) ("slime-interrupt" function (:user-visible-flag t) nil [249202 249405]) ("slime-quit" function nil nil [249407 249498]) ("slime-quit-lisp" function (:user-visible-flag t :arguments ("&optional" "keep-buffers")) nil [249500 249818]) ("slime-quit-sentinel" function (:arguments ("process" "message")) nil [249820 250199]) ("slime-set-package" function (:arguments ("package")) nil [250201 250408]) ("slime-set-default-directory" function (:user-visible-flag t :arguments ("directory")) nil [250410 250874]) ("slime-sync-package-and-default-directory" function (:user-visible-flag t) nil [250876 251777]) ("sldb-hook" variable nil nil [251804 251865]) ("slime-make-variables-buffer-local" code nil nil [251915 252525]) ("in-sldb-face" function (:arguments ("name" "string")) nil [252606 252875]) ("put" code nil nil [252877 252920]) ("slime-add-face" function (:arguments ("face" "string")) nil [252922 253034]) ("sldb-mode-syntax-table" variable (:default-value (let ((table (copy-syntax-table lisp-mode-syntax-table))) (modify-syntax-entry 60 "(" table) (modify-syntax-entry 62 ")" table) table)) nil [253055 253649]) ("define-derived-mode" code nil nil [253651 255130]) ("slime-define-keys" code nil nil [255132 256116]) ("dolist" code nil nil [256154 256390]) ("define-sldb-invoke-restart-key" function (:arguments ("number" "key")) nil [256449 256790]) ("define-sldb-invoke-restart-keys" function (:arguments ("from" "to")) nil [256792 256967]) ("define-sldb-invoke-restart-keys" code nil nil [256969 257006]) ("sldb-buffers" function nil nil [257047 257173]) ("sldb-find-buffer" function (:arguments ("thread" "&optional" "connection")) nil [257175 257509]) ("sldb-get-default-buffer" function nil nil [257511 257635]) ("sldb-get-buffer" function (:arguments ("thread" "&optional" "connection")) nil [257637 258105]) ("sldb-debugged-continuations" function (:arguments ("connection")) nil [258107 258419]) ("sldb-setup" function (:arguments ("thread" "level" "condition" "restarts" "frames" "conts")) nil [258421 259994]) ("sldb-activate" function (:arguments ("thread" "level")) nil [259996 260429]) ("sldb-exit" function (:arguments ("thread" "level" "&optional" "stepping")) nil [260431 260843]) ("sldb-insert-condition" function (:arguments ("condition")) nil [260845 261478]) ("sldb-extras-hooks" variable nil nil [261480 261506]) ("sldb-dispatch-extras" function (:arguments ("extras")) nil [261508 261853]) ("sldb-insert-restarts" function (:arguments ("restarts")) nil [261855 262435]) ("sldb-prune-initial-frames" function (:arguments ("frames")) nil [262437 262852]) ("sldb-insert-frames" function (:arguments ("frames" "more")) nil [262854 263411]) ("sldb-insert-frame" function (:arguments ("frame" "&optional" "face")) nil [263413 263985]) ("sldb-fetch-more-frames" function (:arguments ("&rest" "ignore")) nil [263987 264678]) ("sldb-restart-at-point" function nil nil [264716 264835]) ("sldb-frame-number-at-point" function nil nil [264837 264993]) ("sldb-var-number-at-point" function nil nil [264995 265138]) ("sldb-previous-frame-number" function nil nil [265140 265255]) ("sldb-frame-details-visible-p" function nil nil [265257 265393]) ("sldb-frame-region" function nil nil [265395 265667]) ("sldb-forward-frame" function nil nil [265669 265762]) ("sldb-backward-frame" function nil nil [265764 265954]) ("sldb-goto-last-frame" function nil nil [265956 266129]) ("sldb-beginning-of-backtrace" function (:user-visible-flag t) nil [266131 266253]) ("sldb-show-location-recenter-arg" variable nil nil [266337 266451]) ("slime-show-buffer-position" function (:arguments ("position")) nil [266453 266887]) ("slime-recenter-window" function (:arguments ("window" "line")) nil [266889 267246]) ("sldb-recenter-region" function (:arguments ("start" "end" "&optional" "center")) nil [267248 268331]) ("slime-save-coordinates" function (:arguments ("origin" "&rest" "body")) nil [268379 268988]) ("put" code nil nil [268990 269043]) ("slime-coordinates" function (:arguments ("origin")) nil [269045 269337]) ("slime-restore-coordinate" function (:arguments ("base" "goal" "limit")) nil [269339 269740]) ("slime-count-lines" function (:arguments ("start" "end")) nil [269742 269962]) ("sldb-default-action" function (:user-visible-flag t) nil [269987 270154]) ("sldb-default-action/mouse" function (:user-visible-flag t :arguments ("event")) nil [270156 270452]) ("sldb-end-of-backtrace" function (:user-visible-flag t) nil [270454 270610]) ("sldb-fetch-all-frames" function nil nil [270612 271031]) ("sldb-overlays" variable (:default-value (quote nil)) nil [271060 271164]) ("sldb-show-source" function (:user-visible-flag t) nil [271166 271336]) ("sldb-show-frame-source" function (:arguments ("frame-number")) nil [271338 271693]) ("slime-show-source-location" function (:arguments ("source-location" "&optional" "no-highlight-p")) nil [271695 271906]) ("sldb-highlight-sexp" function (:arguments ("&optional" "start" "end")) nil [271908 272331]) ("sldb-delete-overlays" function nil nil [272333 272431]) ("sldb-toggle-details" function (:user-visible-flag t :arguments ("&optional" "on")) nil [272463 272819]) ("sldb-show-frame-details" function nil nil [272821 273798]) ("sldb-frame-details" function nil nil [273800 274166]) ("sldb-insert-locals" function (:arguments ("vars" "prefix" "frame")) nil [274168 274810]) ("sldb-hide-frame-details" function nil nil [274812 275194]) ("sldb-disassemble" function (:user-visible-flag t) nil [275196 275469]) ("sldb-print-condition" function (:user-visible-flag t) nil [275471 275865]) ("sldb-frame-locals" function (:arguments ("frame")) nil [275867 275954]) ("sldb-catch-tags" function (:arguments ("frame")) nil [275956 276045]) ("sldb-eval-in-frame" function (:user-visible-flag t :arguments ("string")) nil [276079 276513]) ("sldb-pprint-eval-in-frame" function (:user-visible-flag t :arguments ("string")) nil [276515 276896]) ("sldb-inspect-in-frame" function (:user-visible-flag t :arguments ("string")) nil [276900 277315]) ("sldb-inspect-var" function nil nil [277317 277539]) ("sldb-inspect-condition" function (:user-visible-flag t) nil [277541 277732]) ("sldb-down" function (:user-visible-flag t) nil [277758 277840]) ("sldb-up" function (:user-visible-flag t) nil [277842 278030]) ("sldb-sugar-move" function (:arguments ("move-fn")) nil [278032 278238]) ("sldb-details-up" function (:user-visible-flag t) nil [278240 278355]) ("sldb-details-down" function (:user-visible-flag t) nil [278357 278472]) ("sldb-quit" function (:user-visible-flag t) nil [278498 278660]) ("sldb-continue" function (:user-visible-flag t) nil [278662 278871]) ("sldb-abort" function (:user-visible-flag t) nil [278873 279053]) ("sldb-invoke-restart" function (:user-visible-flag t :arguments ("&optional" "number")) nil [279055 279447]) ("sldb-break-with-default-debugger" function (:user-visible-flag t) nil [279449 279643]) ("sldb-step" function (:user-visible-flag t) nil [279645 279840]) ("sldb-next" function (:user-visible-flag t) nil [279842 280037]) ("sldb-out" function (:user-visible-flag t) nil [280039 280232]) ("sldb-break-on-return" function (:user-visible-flag t) nil [280234 280533]) ("sldb-break" function (:user-visible-flag t :arguments ("name")) nil [280535 280780]) ("sldb-return-from-frame" function (:user-visible-flag t :arguments ("string")) nil [280782 281209]) ("sldb-restart-frame" function (:user-visible-flag t) nil [281211 281522]) ("slime-list-threads" function (:user-visible-flag t) nil [281553 282108]) ("slime-thread-insert" function (:arguments ("idx" "name" "summary" "id")) nil [282110 282479]) ("define-derived-mode" code nil nil [282501 282736]) ("slime-define-keys" code nil nil [282738 282966]) ("slime-thread-quit" function nil nil [282968 283095]) ("slime-thread-kill" function nil nil [283097 283284]) ("slime-thread-attach" function nil nil [283286 283536]) ("slime-thread-debug" function nil nil [283538 283690]) ("define-derived-mode" code nil nil [283720 283953]) ("slime-define-keys" code nil nil [283955 284241]) ("slime-connection-at-point" function nil nil [284243 284371]) ("slime-goto-connection" function (:user-visible-flag t) nil [284373 284594]) ("slime-quit-connection-at-point" function (:arguments ("connection")) nil [284596 284877]) ("slime-restart-connection-at-point" function (:arguments ("connection")) nil [284879 285070]) ("slime-connection-list-make-default" function (:user-visible-flag t) nil [285074 285281]) ("slime-list-connections" function (:user-visible-flag t) nil [285283 285708]) ("slime-update-connection-list" function (:user-visible-flag t) nil [285710 285923]) ("slime-draw-connection-list" function nil nil [285925 286721]) ("defgroup" code nil nil [286741 286837]) ("slime-inspector-topline-face" variable (:default-value (quote ((t nil)))) nil [286839 286956]) ("slime-inspector-label-face" variable (:default-value (quote ((t (:inherit font-lock-constant-face))))) nil [286958 287102]) ("slime-inspector-value-face" variable (:default-value (if (slime-face-inheritance-possible-p) (quote ((t (:inherit font-lock-builtin-face)))) (quote ((((background light)) (:foreground "MediumBlue" :bold t)) (((background dark)) (:foreground "LightGray" :bold t)))))) nil [287104 287438]) ("slime-inspector-action-face" variable (:default-value (if (slime-face-inheritance-possible-p) (quote ((t (:inherit font-lock-warning-face)))) (quote ((t (:foreground "OrangeRed")))))) nil [287440 287672]) ("slime-inspector-type-face" variable (:default-value (quote ((t (:inherit font-lock-type-face))))) nil [287674 287821]) ("slime-inspector-mark-stack" variable (:default-value (quote nil)) nil [287823 287862]) ("slime-saved-window-config" variable nil nil [287863 287897]) ("slime-inspect" function (:user-visible-flag t :arguments ("string")) nil [287899 288168]) ("define-derived-mode" code nil nil [288170 288348]) ("slime-inspector-buffer" function nil nil [288350 288724]) ("slime-inspector-fontify" function (:arguments ("face" "string")) nil [288726 288853]) ("slime-open-inspector" function (:arguments ("inspected-parts" "&optional" "point")) nil [288855 289914]) ("slime-inspector-insert-ispec" function (:arguments ("ispec")) nil [289916 290520]) ("slime-inspector-position" function nil nil [290522 291066]) ("slime-inspector-operate-on-point" function (:user-visible-flag t) nil [291068 291937]) ("slime-inspector-operate-on-click" function (:user-visible-flag t :arguments ("event")) nil [291939 292418]) ("slime-inspector-copy-down" function (:user-visible-flag t :arguments ("number")) nil [292420 292739]) ("slime-inspector-pop" function nil nil [292741 293002]) ("slime-inspector-next" function nil nil [293004 293274]) ("slime-inspector-quit" function nil nil [293278 293458]) ("slime-find-inspectable-object" function (:arguments ("direction" "limit")) nil [293460 294318]) ("slime-inspector-next-inspectable-object" function (:user-visible-flag t :arguments ("arg")) nil [294320 295735]) ("slime-inspector-previous-inspectable-object" function (:user-visible-flag t :arguments ("arg")) nil [295738 296003]) ("slime-inspector-describe" function nil nil [296007 296110]) ("slime-inspector-pprint" function (:arguments ("part")) nil [296112 296337]) ("slime-inspector-reinspect" function nil nil [296339 296610]) ("slime-define-keys" code nil nil [296612 297321]) ("slime-selector-methods" variable nil nil [297347 297565]) ("slime-selector" function (:user-visible-flag t) nil [297567 298390]) ("def-slime-selector-method" function (:arguments ("key" "description" "&rest" "body")) nil [298392 299362]) ("def-slime-selector-method" code nil nil [299364 299853]) ("def-slime-selector-method" code nil nil [299855 300061]) ("def-slime-selector-method" code nil nil [300063 300255]) ("def-slime-selector-method" code nil nil [300257 300340]) ("def-slime-selector-method" code nil nil [300342 300461]) ("def-slime-selector-method" code nil nil [300463 300607]) ("def-slime-selector-method" code nil nil [300609 300740]) ("def-slime-selector-method" code nil nil [300742 300853]) ("def-slime-selector-method" code nil nil [300855 301033]) ("slime-recently-visited-buffer" function (:arguments ("mode")) nil [301035 301519]) ("slime-highlight-suppressed-forms" variable (:default-value t) nil [301565 301764]) ("slime-reader-conditional-face" variable (:default-value (if (slime-face-inheritance-possible-p) (quote ((t (:inherit font-lock-comment-face)))) (quote ((((background light)) (:foreground "DimGray" :bold t)) (((background dark)) (:foreground "LightGray" :bold t)))))) nil [301766 302084]) ("slime-search-suppressed-forms" function (:arguments ("limit")) nil [302086 303069]) ("slime-activate-font-lock-magic" function nil nil [303071 303583]) ("when" code nil nil [303585 303659]) ("slime-update-indentation" function (:user-visible-flag t) nil [303681 303859]) ("slime-indentation-update-hooks" variable nil nil [303861 303900]) ("slime-handle-indentation-update" function (:arguments ("alist")) nil [303902 304620]) ("slime-easy-menu" variable (:default-value (let ((C (quote (slime-connected-p)))) (\` ("SLIME" ["Edit Definition..." slime-edit-definition (\, C)] ["Return From Definition" slime-pop-find-definition-stack (\, C)] ["Complete Symbol" slime-complete-symbol (\, C)] ["Show REPL" slime-switch-to-output-buffer (\, C)] "--" ("Evaluation" ["Eval Defun" slime-eval-defun (\, C)] ["Eval Last Expression" slime-eval-last-expression (\, C)] ["Eval And Pretty-Print" slime-pprint-eval-last-expression (\, C)] ["Eval Region" slime-eval-region (\, C)] ["Interactive Eval..." slime-interactive-eval (\, C)] ["Edit Lisp Value..." slime-edit-value (\, C)] ["Call Defun" slime-call-defun (\, C)]) ("Debugging" ["Macroexpand Once..." slime-macroexpand-1 (\, C)] ["Macroexpand All..." slime-macroexpand-all (\, C)] ["Create Trace Buffer" slime-redirect-trace-output (\, C)] ["Toggle Trace..." slime-toggle-trace-fdefinition (\, C)] ["Untrace All" slime-untrace-all (\, C)] ["Disassemble..." slime-disassemble-symbol (\, C)] ["Inspect..." slime-inspect (\, C)]) ("Compilation" ["Compile Defun" slime-compile-defun (\, C)] ["Compile/Load File" slime-compile-and-load-file (\, C)] ["Compile File" slime-compile-file (\, C)] ["Compile Region" slime-compile-region (\, C)] "--" ["Next Note" slime-next-note t] ["Previous Note" slime-previous-note t] ["Remove Notes" slime-remove-notes t] ["List Notes" slime-list-compiler-notes (\, C)]) ("Cross Reference" ["Who Calls..." slime-who-calls (\, C)] ["Who References... " slime-who-references (\, C)] ["Who Sets..." slime-who-sets (\, C)] ["Who Binds..." slime-who-binds (\, C)] ["Who Macroexpands..." slime-who-macroexpands (\, C)] ["Who Specializes..." slime-who-specializes (\, C)] ["List Callers..." slime-list-callers (\, C)] ["List Callees..." slime-list-callees (\, C)] ["Next Location" slime-next-location t]) ("Editing" ["Check Parens" check-parens t] ["Update Indentation" slime-update-indentation (\, C)] ["Select Buffer" slime-selector t]) ("Profiling" ["Toggle Profiling..." slime-toggle-profile-fdefinition (\, C)] ["Profile Package" slime-profile-package (\, C)] ["Unprofile All" slime-unprofile-all (\, C)] ["Show Profiled" slime-profiled-functions (\, C)] "--" ["Report" slime-profile-report (\, C)] ["Reset Counters" slime-profile-reset (\, C)]) ("Documentation" ["Describe Symbol..." slime-describe-symbol (\, C)] ["Apropos..." slime-apropos (\, C)] ["Apropos all..." slime-apropos-all (\, C)] ["Apropos Package..." slime-apropos-package (\, C)] ["Hyperspec..." slime-hyperspec-lookup t]) "--" ["Interrupt Command" slime-interrupt (\, C)] ["Abort Async. Command" slime-quit (\, C)] ["Sync Package & Directory" slime-sync-package-and-default-directory (\, C)] ["Set Package in REPL" slime-repl-set-package (\, C)])))) nil [304646 308164]) ("slime-repl-easy-menu" variable (:default-value (let ((C (quote (slime-connected-p)))) (\` ("REPL" ["Send Input" slime-repl-return (\, C)] ["Close and Send Input " slime-repl-closing-return (\, C)] ["Interrupt Lisp process" slime-interrupt (\, C)] "--" ["Previous Input" slime-repl-previous-input t] ["Next Input" slime-repl-next-input t] ["Goto Previous Prompt " slime-repl-previous-prompt t] ["Goto Next Prompt " slime-repl-next-prompt t] ["Clear Last Output" slime-repl-clear-output t] ["Clear Buffer " slime-repl-clear-buffer t] ["Kill Current Input" slime-repl-kill-input t])))) nil [308166 308856]) ("slime-sldb-easy-menu" variable (:default-value (let ((C (quote (slime-connected-p)))) (\` ("SLDB" ["Next Frame" sldb-down t] ["Previous Frame" sldb-up t] ["Toggle Frame Details" sldb-toggle-details t] ["Next Frame (Details)" sldb-details-down t] ["Previous Frame (Details)" sldb-details-up t] "--" ["Eval Expression..." slime-interactive-eval (\, C)] ["Eval in Frame..." sldb-eval-in-frame (\, C)] ["Eval in Frame (pretty print)..." sldb-pprint-eval-in-frame (\, C)] ["Inspect In Frame..." sldb-inspect-in-frame (\, C)] ["Inspect Condition Object" sldb-inspect-condition (\, C)] ["Print Condition to REPL" sldb-print-condition t] "--" ["Restart Frame" sldb-restart-frame (\, C)] ["Return from Frame..." sldb-return-from-frame (\, C)] ("Invoke Restart" ["Continue" sldb-continue (\, C)] ["Abort" sldb-abort (\, C)] ["Step" sldb-step (\, C)] ["Step next" sldb-next (\, C)] ["Step out" sldb-out (\, C)]) "--" ["Quit (throw)" sldb-quit (\, C)] ["Break With Default Debugger" sldb-break-with-default-debugger (\, C)])))) nil [308864 310006]) ("easy-menu-define" code nil nil [310008 310079]) ("slime-add-easy-menu" function nil nil [310081 310161]) ("add-hook" code nil nil [310163 310211]) ("slime-repl-add-easy-menu" function nil nil [310213 310484]) ("add-hook" code nil nil [310486 310544]) ("slime-sldb-add-easy-menu" function nil nil [310546 310722]) ("add-hook" code nil nil [310724 310776]) ("slime-cheat-sheet-table" variable (:default-value (quote ((:title "Editing lisp code" :map slime-mode-map :bindings ((slime-eval-defun "Evaluate current top level form") (slime-compile-defun "Compile current top level form") (slime-interactive-eval "Prompt for form and eval it") (slime-compile-and-load-file "Compile and load current file") (slime-sync-package-and-default-directory "Synch default package and directory with current buffer") (slime-next-note "Next compiler note") (slime-previous-note "Previous compiler note") (slime-remove-notes "Remove notes") slime-hyperspec-lookup)) (:title "Completion" :map slime-mode-map :bindings (slime-indent-and-complete-symbol slime-fuzzy-complete-symbol)) (:title "At the REPL" :map slime-repl-mode-map :bindings (slime-repl-clear-buffer slime-describe-symbol)) (:title "Within SLDB buffers" :map sldb-mode-map :bindings ((sldb-default-action "Do 'whatever' with thing at point") (sldb-toggle-details "Toggle frame details visualization") (sldb-quit "Quit to REPL") (sldb-abort "Invoke ABORT restart") (sldb-continue "Invoke CONTINUE restart (if available)") (sldb-show-source "Jump to frame's source code") (sldb-eval-in-frame "Evaluate in frame at point") (sldb-inspect-in-frame "Evaluate in frame at point and inspect result"))) (:title "Within the Inspector" :map slime-inspector-mode-map :bindings ((slime-inspector-next-inspectable-object "Jump to next inspectable object") (slime-inspector-operate-on-point "Inspect object or execute action at point") (slime-inspector-reinspect "Reinspect current object") (slime-inspector-pop "Return to previous object") (slime-inspector-copy-down "Send object at point to REPL") (slime-inspector-quit "Quit"))) (:title "Finding Definitions" :map slime-mode-map :bindings (slime-edit-definition slime-pop-find-definition-stack))))) nil [310798 313049]) ("slime-cheat-sheet" function nil nil [313051 315103]) ("slime-test" type (:members ("name" "fname" "args" "doc" "inputs" "fails-for") :type "struct") nil [315124 315212]) ("slime-tests" variable (:default-value (quote nil)) nil [315216 315269]) ("slime-test-debug-on-error" variable (:user-visible-flag t) nil [315271 315355]) ("slime-total-tests" variable nil nil [315357 315441]) ("slime-failed-tests" variable nil nil [315443 315526]) ("slime-expected-failures" variable nil nil [315528 315620]) ("slime-test-buffer-name" variable (:default-value "*Tests*") nil [315622 315720]) ("slime-current-test" variable nil nil [315765 315792]) ("slime-unexpected-failures" variable nil nil [315793 315827]) ("slime-run-tests" function (:user-visible-flag t) nil [315855 316421]) ("slime-run-one-test" function (:user-visible-flag t :arguments ("name")) nil [316423 316704]) ("slime-read-test-name" function nil nil [316706 316935]) ("slime-test-should-fail-p" function (:arguments ("test")) nil [316937 317058]) ("slime-execute-tests" function nil nil [317060 319193]) ("slime-batch-test" function (:arguments ("results-file")) nil [319195 319839]) ("slime-create-test-results-buffer" function nil nil [319885 320235]) ("slime-delete-hidden-outline-text" function nil nil [320237 320686]) ("slime-test-heading" function (:arguments ("level" "format" "&rest" "args")) nil [320688 321033]) ("slime-test-failure" function (:arguments ("keyword" "string")) nil [321035 321497]) ("slime-test-message" function (:arguments ("string")) nil [321499 321676]) ("def-slime-test" function (:arguments ("name" "args" "doc" "inputs" "&rest" "body")) nil [321718 322714]) ("slime-check" function (:arguments ("test-name" "&rest" "body")) nil [322716 323640]) ("slime-print-check-ok" function (:arguments ("test-name")) nil [323642 323715]) ("slime-print-check-failed" function (:arguments ("test-name")) nil [323717 323803]) ("slime-print-check-error" function (:arguments ("reason")) nil [323805 323897]) ("put" code nil nil [323899 323944]) ("put" code nil nil [323945 323987]) ("setq" code nil nil [324044 324066]) ("slime-check-top-level" function (:arguments ("&optional" "test-name")) nil [324068 324254]) ("slime-at-top-level-p" function nil nil [324256 324367]) ("slime-wait-condition" function (:arguments ("name" "predicate" "timeout")) nil [324369 324834]) ("slime-sync-to-top-level" function (:arguments ("timeout")) nil [324836 324945]) ("slime-check-sldb-level" function (:arguments ("expected")) nil [324971 325261]) ("slime-test-expect" function (:arguments ("name" "expected" "actual" "&optional" "test")) nil [325263 325605]) ("sldb-level" function nil nil [325607 325722]) ("slime-sldb-level=" function (:arguments ("level")) nil [325724 325865]) ("def-slime-test" code nil nil [325867 327883]) ("def-slime-test" code nil nil [327886 328973]) ("def-slime-test" code nil nil [328975 329838]) ("def-slime-test" code nil nil [329840 331276]) ("def-slime-test" code nil nil [331278 332701]) ("def-slime-test" code nil nil [332703 333776]) ("def-slime-test" code nil nil [333778 335198]) ("sldb-first-abort-restart" function nil nil [335200 335342]) ("def-slime-test" code nil nil [335344 335819]) ("def-slime-test" code nil nil [335821 336683]) ("def-slime-test" code nil nil [336686 337294]) ("def-slime-test" code nil nil [337296 338078]) ("def-slime-test" code nil nil [338080 338897]) ("def-slime-test" code nil nil [338899 339833]) ("def-slime-test" code nil nil [339835 340709]) ("def-slime-test" code nil nil [340713 341612]) ("def-slime-test" code nil nil [341614 342412]) ("def-slime-test" code nil nil [342414 343026]) ("def-slime-test" code nil nil [343028 344198]) ("def-slime-test" code nil nil [344200 344940]) ("def-slime-test" code nil nil [344942 345448]) ("def-slime-test" code nil nil [345450 346553]) ("def-slime-test" code nil nil [346555 347600]) ("slime-length=" function (:arguments ("seq" "n")) nil [347637 348013]) ("slime-length>" function (:arguments ("seq" "n")) nil [348015 348161]) ("slime-split-string" function (:arguments ("string" "&optional" "separators" "omit-nulls")) nil [348163 348815]) ("slime-buffer-narrowed-p" function (:arguments ("&optional" "buffer")) nil [348839 349148]) ("slime-defun-at-point" function nil nil [349205 349365]) ("slime-region-for-defun-at-point" function nil nil [349367 349623]) ("slime-beginning-of-symbol" function nil nil [349625 350013]) ("slime-end-of-symbol" function nil nil [350015 350337]) ("put" code nil nil [350339 350387]) ("put" code nil nil [350388 350448]) ("slime-symbol-start-pos" function nil nil [350450 350665]) ("slime-symbol-end-pos" function nil nil [350667 350747]) ("slime-symbol-name-at-point" function nil nil [350749 351438]) ("slime-symbol-at-point" function nil nil [351440 351594]) ("slime-sexp-at-point" function nil nil [351596 351778]) ("slime-sexp-at-point-or-error" function nil nil [351780 351955]) ("when" code nil nil [351983 352029]) ("slime-defun-if-undefined" function (:arguments ("name" "&rest" "rest")) nil [352031 352280]) ("put" code nil nil [352282 352337]) ("slime-accept-process-output-supports-floats" variable (:default-value (ignore-errors (accept-process-output nil 0.0) t)) nil [352339 352444]) ("slime-accept-process-output" function (:arguments ("&optional" "process" "timeout")) nil [352446 352960]) ("slime-defun-if-undefined" code nil nil [352962 353638]) ("slime-defun-if-undefined" code nil nil [353640 354556]) ("slime-defun-if-undefined" code nil nil [354558 354776]) ("slime-defun-if-undefined" code nil nil [354778 355013]) ("slime-defun-if-undefined" code nil nil [355023 355271]) ("slime-defun-if-undefined" code nil nil [355273 355589]) ("slime-defun-if-undefined" code nil nil [355591 355945]) ("slime-defun-if-undefined" code nil nil [355947 356041]) ("slime-defun-if-undefined" code nil nil [356043 356476]) ("slime-defun-if-undefined" code nil nil [356478 357139]) ("slime-defun-if-undefined" code nil nil [357141 357366]) ("slime-defun-if-undefined" code nil nil [357368 357565]) ("slime-defun-if-undefined" code nil nil [357567 358454]) ("slime-defun-if-undefined" code nil nil [358456 358577]) ("slime-defun-if-undefined" code nil nil [358579 358688]) ("slime-defun-if-undefined" code nil nil [358690 359868]) ("slime-defun-if-undefined" code nil nil [359870 360483]) ("slime-defun-if-undefined" code nil nil [360485 360637]) ("slime-defun-if-undefined" code nil nil [360639 360718]) ("slime-defun-if-undefined" code nil nil [360720 360815]) ("unless" code nil nil [360817 361341]) ("unless" code nil nil [361343 361931]) ("slime-emacs-20-p" function nil nil [361933 362027]) ("slime-emacs-21-p" function nil nil [362029 362123]) ("when" code nil nil [362125 362214]) ("sldb-xemacs-emulate-point-entered-hook" function nil nil [362216 362362]) ("sldb-xemacs-post-command-hook" function nil nil [362364 362513]) ("slime-defun-if-undefined" code nil nil [362515 362649]) ("slime-defun-if-undefined" code nil nil [362686 362821]) ("slime-defun-if-undefined" code nil nil [362823 362967]) ("slime-obsolete-commands" variable (:default-value (quote (("\351" (slime repl) slime-fuzzy-complete-symbol) ("\361" (slime) slime-reindent-defun) ("" (slime) slime-complete-form)))) nil [363030 363408]) ("slime-bind-obsolete-commands" function nil nil [363410 363581]) ("slime-bind-obsolete-command" function (:arguments ("map" "key" "command")) nil [363583 363930]) ("slime-bind-obsolete-commands" code nil nil [363932 363962]) ("slime-upgrade-notice" function (:arguments ("command")) nil [363964 364251]) ("slime-timebomb" function (:arguments ("message" "timeout")) nil [364286 364530]) ("slime-timebomb-progress" function (:arguments ("mark" "timeout")) nil [364532 365010]) ("slime-timebomb-message" function (:arguments ("timeout")) nil [365012 365216]) ("bytecomp" include nil nil [365239 365258]) ("let" code nil nil [365259 365891]) ("slime" package nil nil [365893 365909]) ("run-hooks" code nil nil [365910 365938]))
    :file "slime.el"
    :pointmax 366182
    :unmatched-syntax 'nil
    )
   (semanticdb-table "swank-loader.lisp"
    :major-mode 'lisp-mode
    :tags '(("cl:defpackage" code nil nil [639 765]) ("cl:in-package" code nil nil [767 796]) ("*source-directory*" variable (:default-value (make-pathname :name nil :type nil :defaults (or *load-pathname* *default-pathname-defaults*))) nil [798 987]) ("defparameter" code nil nil [1634 1781]) ("defparameter" code nil nil [1783 1898]) ("defparameter" code nil nil [1900 2045]) ("unique-directory-name" function nil nil [2955 4164]) ("file-newer-p" function (:arguments ("new-file" "old-file")) nil [4166 4319]) ("slime-version-string" function nil nil [4321 4602]) ("default-fasl-directory" function nil nil [4604 4866]) ("binary-pathname" function (:arguments ("source-pathname" "binary-directory")) nil [4868 5221]) ("handle-loadtime-error" function (:arguments ("condition" "binary-pathname")) nil [5223 5661]) ("compile-files-if-needed-serially" function (:arguments ("files" "fasl-directory" "load")) nil [5663 6858]) ("or" code nil nil [6862 6881]) ("compile-files-if-needed-serially" function (:arguments ("files" "fasl-directory")) nil [6882 7109]) ("load-user-init-file" function nil nil [7111 7354]) ("load-site-init-file" function (:arguments ("directory")) nil [7356 7525]) ("source-files" function (:arguments ("names" "src-dir")) nil [7527 7721]) ("swank-source-files" function (:arguments ("src-dir")) nil [7723 7845]) ("*fasl-directory*" variable (:default-value (default-fasl-directory)) nil [7847 7950]) ("absolute" code nil nil [8254 8269]) ("merge-pathnames" code nil nil [8272 8370]) ("append-dir" function (:arguments ("absolute" "name")) nil [8236 8371]) ("src-dir" code nil nil [8396 8405]) ("append-dir" code nil nil [8408 8438]) ("src-dir" code nil nil [8469 8478]) ("source-files" code nil nil [8481 8532]) ("&key" code nil nil [8553 8772]) ("compile-files-if-needed-serially" code nil nil [8775 8900]) ("compile-files-if-needed-serially" code nil nil [8903 9040]) ("slime-version-string" code nil nil [9100 9122]) ("append" code nil nil [9156 9227]))
    :file "swank-loader.lisp"
    :pointmax 9367
    )
   (semanticdb-table "slime-autoloads.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("slime" function (:prototype-flag t :user-visible-flag t) nil [319 407]) ("slime-mode" function (:prototype-flag t :user-visible-flag t) nil [410 507]) ("slime-connect" function (:prototype-flag t :user-visible-flag t) nil [509 583]) ("hyperspec-lookup" function (:prototype-flag t :user-visible-flag t) nil [585 631]) ("slime-lisp-mode-hook" function (:prototype-flag t) nil [633 673]) ("slime-scheme-mode-hook" function (:prototype-flag t) nil [674 716]) ("slime-lisp-modes" variable (:default-value (quote (lisp-mode))) nil [718 756]) ("slime-setup" function (:arguments ("&optional" "contribs")) nil [758 1096]) ("slime-setup-contribs" variable nil nil [1098 1131]) ("slime-setup-contribs" function nil nil [1133 1317]) ("slime-autoloads" package nil nil [1319 1345]))
    :file "slime-autoloads.el"
    :pointmax 1380
    :unmatched-syntax 'nil
    )
   (semanticdb-table "swank-abcl.lisp"
    :major-mode 'lisp-mode
    :tags '(("in-package" code nil nil [286 313]) ("eval-when" code nil nil [315 461]) ("sys::break" function (:arguments ("&optional" "format-control" "&rest" "format-arguments")) nil [463 914]) ("defimplementation" code nil nil [916 1123]) ("defimplementation" code nil nil [1125 1204]) ("standard-slot-definition" type (:type "class") nil [1247 1287]) ("slot-definition-type" function (:arguments ("slot")) nil [1402 1439]) ("class-prototype" function (:arguments ("class")) nil [1440 1471]) ("generic-function-declarations" function (:arguments ("gf")) nil [1472 1514]) ("specializer-direct-methods" function (:arguments ("spec")) nil [1515 1589]) ("slot-definition-name" function (:arguments ("slot")) nil [1591 1662]) ("class-slots" function (:arguments ("class")) nil [1664 1719]) ("method-generic-function" function (:arguments ("method")) nil [1721 1802]) ("method-function" function (:arguments ("method")) nil [1804 1869]) ("slot-boundp-using-class" function (:arguments ("class" "object" "slotdef")) nil [1871 1987]) ("slot-value-using-class" function (:arguments ("class" "object" "slotdef")) nil [1989 2103]) ("import-to-swank-mop" code nil nil [2105 3497]) ("defimplementation" code nil nil [3517 3578]) ("defimplementation" code nil nil [3582 3659]) ("defimplementation" code nil nil [3662 3777]) ("defimplementation" code nil nil [3780 3856]) ("defimplementation" code nil nil [3858 4090]) ("defimplementation" code nil nil [4111 4174]) ("defimplementation" code nil nil [4206 4239]) ("defimplementation" code nil nil [4241 4307]) ("defimplementation" code nil nil [4309 4486]) ("defimplementation" code nil nil [4500 4700]) ("defimplementation" code nil nil [4702 4800]) ("defimplementation" code nil nil [4802 4865]) ("defimplementation" code nil nil [4867 5473]) ("defimplementation" code nil nil [5476 5720]) ("defimplementation" code nil nil [5722 5966]) ("*sldb-topframe*" variable nil nil [5984 6008]) ("backtrace-as-list-ignoring-swank-calls" function nil nil [6010 6195]) ("nth-frame" function (:arguments ("index")) nil [6406 6486]) ("defimplementation" code nil nil [6488 6647]) ("defimplementation" code nil nil [6825 6907]) ("defimplementation" code nil nil [6910 6987]) ("defimplementation" code nil nil [6995 7100]) ("defimplementation" code nil nil [7102 7266]) ("defimplementation" code nil nil [7274 7430]) ("defimplementation" code nil nil [7438 7704]) ("defimplementation" code nil nil [7785 7941]) ("*buffer-name*" variable nil nil [7990 8016]) ("*buffer-start-position*" variable nil nil [8017 8049]) ("*buffer-string*" variable nil nil [8050 8074]) ("*compile-filename*" variable nil nil [8075 8102]) ("in-package" code nil nil [8104 8131]) ("handle-compiler-warning" function (:arguments ("condition")) nil [8133 9328]) ("*abcl-signaled-conditions*" variable nil nil [9330 9365]) ("defimplementation" code nil nil [9367 9830]) ("defimplementation" code nil nil [9832 10350]) ("source-location" function (:arguments ("symbol")) nil [11274 11541]) ("defimplementation" code nil nil [11544 11616]) ("abcl-inspector" type (:superclasses "backend-inspector" :type "class") nil [12464 12512]) ("defimplementation" code nil nil [12514 12593]) ("inspect-for-emacs" function (:parent "mop::slot-definition" :arguments ("slot" "inspector")) nil [12595 13464]) ("defimplementation" code nil nil [14834 14930]) ("*thread-props-lock*" variable (:default-value (ext:make-thread-lock)) nil [14932 14983]) ("*thread-props*" variable (:default-value (make-hash-table)) nil [14985 15095]) ("*thread-id-counter*" variable nil nil [15097 15127]) ("defimplementation" code nil nil [15129 15365]) ("defimplementation" code nil nil [15367 15520]) ("defimplementation" code nil nil [15522 15589]) ("defimplementation" code nil nil [15591 15705]) ("defimplementation" code nil nil [15707 15773]) ("defimplementation" code nil nil [15775 15881]) ("defimplementation" code nil nil [15883 15943]) ("defimplementation" code nil nil [15945 16025]) ("defimplementation" code nil nil [16027 16110]) ("defimplementation" code nil nil [16112 16182]) ("mailbox" function (:arguments ("thread")) nil [16184 16437]) ("defimplementation" code nil nil [16439 16524]) ("defimplementation" code nil nil [16526 16608]) ("*auto-flush-streams*" variable (:default-value (quote nil)) nil [16657 16690]) ("*auto-flush-thread*" variable nil nil [16694 16726]) ("defimplementation" code nil nil [16728 17007]) ("flush-streams" function nil nil [17009 17317]) ("defimplementation" code nil nil [17319 17364]))
    :file "swank-abcl.lisp"
    :pointmax 17369
    )
   (semanticdb-table "swank-sbcl.lisp"
    :major-mode 'lisp-mode
    :tags '(("in-package" code nil nil [311 338]) ("eval-when" code nil nil [340 512]) ("declaim" code nil nil [514 576]) ("import-from" code nil nil [578 637]) ("eval-when" code nil nil [672 1403]) ("import-swank-mop-symbols" code nil nil [1420 1488]) ("swank-mop:slot-definition-documentation" function (:arguments ("slot")) nil [1490 1577]) ("defimplementation" code nil nil [1595 1838]) ("resolve-hostname" function (:arguments ("name")) nil [1840 1962]) ("defimplementation" code nil nil [1964 2304]) ("defimplementation" code nil nil [2306 2397]) ("defimplementation" code nil nil [2399 2531]) ("defimplementation" code nil nil [2533 2875]) ("*sigio-handlers*" variable (:default-value (quote nil)) nil [2877 2958]) ("sigio-handler" function (:arguments ("signal" "code" "scp")) nil [2960 3138]) ("set-sigio-handler" function nil nil [3140 3312]) ("enable-sigio-on-fd" function (:arguments ("fd")) nil [3314 3455]) ("defimplementation" code nil nil [3457 3688]) ("defimplementation" code nil nil [3690 3897]) ("defimplementation" code nil nil [3899 4210]) ("defimplementation" code nil nil [4212 4311]) ("socket-fd" function (:arguments ("socket")) nil [4313 4502]) ("*external-format-to-coding-system*" variable (:default-value (quote ((:iso-8859-1 "latin-1" "latin-1-unix" "iso-latin-1-unix" "iso-8859-1" "iso-8859-1-unix") (:utf-8 "utf-8" "utf-8-unix") (:euc-jp "euc-jp" "euc-jp-unix") (:us-ascii "us-ascii" "us-ascii-unix")))) nil [4504 4767]) ("defimplementation" code nil nil [4769 4950]) ("accept" function (:arguments ("socket")) nil [5447 5646]) ("defimplementation" code nil nil [5648 5770]) ("defimplementation" code nil nil [5772 5821]) ("defimplementation" code nil nil [5823 5884]) ("feature-in-list-p" function (:arguments ("feature" "list")) nil [6224 6684]) ("shebang-readtable" function nil nil [7733 7783]) ("sbcl-package-p" function (:arguments ("package")) nil [7785 7891]) ("sbcl-source-file-p" function (:arguments ("filename")) nil [7893 8048]) ("guess-readtable-for-filename" function (:arguments ("filename")) nil [8050 8178]) ("*debootstrap-packages*" variable (:default-value t) nil [8180 8213]) ("call-with-debootstrapping" function (:arguments ("fun")) nil [8215 8375]) ("with-debootstrapping" function (:arguments ("&body" "body")) nil [8377 8471]) ("defimplementation" code nil nil [8473 8680]) ("defimplementation" code nil nil [8682 8895]) ("defimplementation" code nil nil [8912 8988]) ("defimplementation" code nil nil [8990 9078]) ("*buffer-name*" variable nil nil [9770 9796]) ("*buffer-offset*" variable nil nil [9797 9821]) ("*buffer-substring*" variable nil nil [9822 9853]) ("*previous-compiler-condition*" variable nil nil [9855 9928]) ("handle-notification-condition" function (:arguments ("condition")) nil [9930 10454]) ("signal-compiler-condition" function (:arguments ("condition" "context")) nil [10456 11196]) ("real-condition" function (:arguments ("condition")) nil [11198 11410]) ("condition-references" function (:arguments ("condition")) nil [11412 11592]) ("compiler-note-location" function (:arguments ("context")) nil [11594 11884]) ("locate-compiler-note" function (:arguments ("file" "source-path" "source")) nil [11886 12886]) ("brief-compiler-message-for-emacs" function (:arguments ("condition")) nil [12888 13241]) ("long-compiler-message-for-emacs" function (:arguments ("condition" "error-context")) nil [13243 13839]) ("compiler-source-path" function (:arguments ("context")) nil [13841 14300]) ("defimplementation" code nil nil [14302 14790]) ("handle-file-compiler-termination" function (:arguments ("condition")) nil [14792 14990]) ("*trap-load-time-warnings*" variable nil nil [14992 15030]) ("defimplementation" code nil nil [15032 15555]) ("sb-alien:define-alien-routine" code nil nil [15839 15928]) ("temp-file-name" function nil nil [15930 16058]) ("defimplementation" code nil nil [16060 17066]) ("*debug-definition-finding*" variable nil nil [17086 17249]) ("defparameter" code nil nil [17251 17910]) ("defimplementation" code nil nil [17912 18316]) ("make-source-location-specification" function (:arguments ("type" "name" "source-location")) nil [18318 18832]) ("make-definition-source-location" function (:arguments ("definition-source" "type" "name")) nil [18834 20380]) ("string-path-snippet" function (:arguments ("string" "form-path" "position")) nil [20382 20848]) ("source-file-position" function (:arguments ("filename" "write-date" "form-path" "character-offset")) nil [20858 21210]) ("source-hint-snippet" function (:arguments ("filename" "write-date" "position")) nil [21212 21399]) ("function-source-location" function (:arguments ("function" "&optional" "name")) nil [21401 21627]) ("safe-function-source-location" function (:arguments ("fun" "name")) nil [21629 21881]) ("defimplementation" code nil nil [21883 22977]) ("defimplementation" code nil nil [22979 23385]) ("swank-backend::sbcl-with-xref-p" code nil nil [23393 23426]) ("progn" code nil nil [23427 23788]) ("source-location-for-xref-data" function (:arguments ("xref-data")) nil [23790 24213]) ("defimplementation" code nil nil [24215 24385]) ("defimplementation" code nil nil [24387 24557]) ("sanitize-xrefs" function (:arguments ("xrefs")) nil [24559 25378]) ("function-dspec" function (:arguments ("fn")) nil [25566 25782]) ("defimplementation" code nil nil [25804 25929]) ("*sldb-stack-top*" variable nil nil [25948 25973]) ("defimplementation" code nil nil [25975 26079]) ("externalize-reference" function (:arguments ("ref")) nil [26491 26816]) ("defimplementation" code nil nil [26818 27307]) ("swank-backend::sbcl-with-new-stepper-p" code nil nil [27313 27353]) ("progn" code nil nil [27354 27813]) ("nth-frame" function (:arguments ("index")) nil [28393 28525]) ("defimplementation" code nil nil [28527 28883]) ("defimplementation" code nil nil [28885 28975]) ("code-location-source-location" function (:arguments ("code-location")) nil [29354 29784]) ("file-source-location" function (:arguments ("code-location")) nil [30273 30474]) ("fallback-source-location" function (:arguments ("code-location")) nil [30476 30707]) ("lisp-source-location" function (:arguments ("code-location")) nil [30709 30922]) ("emacs-buffer-source-location" function (:arguments ("code-location" "plist")) nil [30924 31578]) ("source-file-source-location" function (:arguments ("code-location")) nil [31580 32111]) ("code-location-debug-source-name" function (:arguments ("code-location")) nil [32113 32246]) ("code-location-debug-source-created" function (:arguments ("code-location")) nil [32248 32390]) ("code-location-debug-fun-fun" function (:arguments ("code-location")) nil [32392 32513]) ("code-location-has-debug-block-info-p" function (:arguments ("code-location")) nil [32515 32705]) ("stream-source-position" function (:arguments ("code-location" "stream")) nil [32707 33426]) ("string-source-position" function (:arguments ("code-location" "string")) nil [33428 33564]) ("safe-source-location-for-emacs" function (:arguments ("code-location")) nil [33641 33902]) ("defimplementation" code nil nil [33904 34047]) ("frame-debug-vars" function (:arguments ("frame")) nil [34049 34192]) ("debug-var-value" function (:arguments ("var" "frame" "location")) nil [34194 34379]) ("defimplementation" code nil nil [34381 34717]) ("defimplementation" code nil nil [34719 34922]) ("defimplementation" code nil nil [34924 35025]) ("defimplementation" code nil nil [35027 35281]) ("swank-backend::sbcl-with-restart-frame" code nil nil [35287 35327]) ("progn" code nil nil [35328 36449]) ("swank-backend::sbcl-with-restart-frame" code nil nil [36596 36636]) ("progn" code nil nil [36637 37277]) ("defimplementation" code nil nil [37307 37444]) ("defimplementation" code nil nil [37464 37550]) ("defimplementation" code nil nil [37552 37642]) ("defimplementation" code nil nil [37644 37735]) ("defimplementation" code nil nil [37737 37796]) ("defimplementation" code nil nil [37798 37885]) ("defimplementation" code nil nil [37887 37951]) ("defimplementation" code nil nil [37953 38121]) ("sbcl-inspector" type (:superclasses "backend-inspector" :type "class") nil [38141 38189]) ("defimplementation" code nil nil [38191 38270]) ("inspect-for-emacs" function (:parent "t" :arguments ("o" "inspector")) nil [38272 38897]) ("inspect-for-emacs" function (:parent "function" :arguments ("o" "inspector")) nil [38899 39990]) ("inspect-for-emacs" function (:parent "sb-kernel:code-component" :arguments ("o" "_")) nil [39992 41483]) ("inspect-for-emacs" function (:parent "sb-ext:weak-pointer" :arguments ("o" "inspector")) nil [41485 41710]) ("inspect-for-emacs" function (:parent "sb-kernel:fdefn" :arguments ("o" "inspector")) nil [41712 41974]) ("inspect-for-emacs" function (:parent "generic-function" :arguments ("o" "inspector")) nil [41976 42459]) ("progn" code nil nil [42576 47962]) ("toggle-trace-aux" function (:arguments ("fspec" "&rest" "args")) nil [48444 48765]) ("process-fspec" function (:arguments ("fspec")) nil [48767 49135]) ("defimplementation" code nil nil [49137 49543]))
    :file "swank-sbcl.lisp"
    :pointmax 50199
    )
   (semanticdb-table "swank-backend.lisp"
    :major-mode 'lisp-mode
    :tags '(("defpackage" code nil nil [420 1313]) ("defpackage" code nil nil [1315 2744]) ("in-package" code nil nil [2746 2773]) ("defparameter" code nil nil [2792 2874]) ("defparameter" code nil nil [2876 3041]) ("definterface" function (:arguments ("name" "args" "documentation" "&rest" "default-body")) nil [3043 5469]) ("defimplementation" function (:arguments ("name" "args" "&body" "body")) nil [5471 5928]) ("warn-unimplemented-interfaces" function nil nil [5930 6198]) ("import-to-swank-mop" function (:arguments ("symbol-list")) nil [6200 6473]) ("import-swank-mop-symbols" function (:arguments ("package" "except")) nil [6475 6964]) ("import-from" function (:arguments ("package" "symbol-names" "&optional" "to-package")) nil [7502 7857]) ("with-struct" function (:arguments ("conc-name" "obj" "&body" "body")) nil [7877 8537]) ("definterface" code nil nil [8558 8666]) ("definterface" code nil nil [8668 8746]) ("definterface" code nil nil [8748 8813]) ("definterface" code nil nil [8815 9041]) ("definterface" code nil nil [9043 9128]) ("definterface" code nil nil [9130 9217]) ("definterface" code nil nil [9219 9327]) ("definterface" code nil nil [9329 9410]) ("definterface" code nil nil [9412 9532]) ("definterface" code nil nil [9534 9755]) ("define-condition" code nil nil [9799 9849]) ("definterface" code nil nil [9851 10162]) ("defconstant" code nil nil [10185 10209]) ("definterface" code nil nil [10211 10325]) ("definterface" code nil nil [10327 10407]) ("definterface" code nil nil [10409 10538]) ("definterface" code nil nil [10540 10673]) ("definterface" code nil nil [10675 10915]) ("definterface" code nil nil [10917 11023]) ("definterface" code nil nil [11025 11137]) ("definterface" code nil nil [11139 11199]) ("definterface" code nil nil [11221 11326]) ("with-compilation-hooks" function (:arguments ("&rest" "&body" "body")) nil [11328 11529]) ("definterface" code nil nil [11531 12079]) ("definterface" code nil nil [12081 12326]) ("deftype" code nil nil [12328 12411]) ("define-condition" code nil nil [12477 13225]) ("definterface" code nil nil [13227 13502]) ("definterface" code nil nil [13504 14669]) ("definterface" code nil nil [15132 15512]) ("definterface" code nil nil [15514 15859]) ("definterface" code nil nil [15883 16169]) ("declaration-arglist" function nil nil [16171 17495]) ("type-specifier-arglist" function nil nil [17497 18221]) ("definterface" code nil nil [18223 18432]) ("definterface" code nil nil [18434 18542]) ("definterface" code nil nil [18544 19055]) ("definterface" code nil nil [19057 19391]) ("definterface" code nil nil [19393 20256]) ("definterface" code nil nil [20258 20468]) ("definterface" code nil nil [20488 20747]) ("definterface" code nil nil [20749 21205]) ("definterface" code nil nil [21207 21410]) ("define-condition" code nil nil [21412 22071]) ("definterface" code nil nil [22073 22533]) ("definterface" code nil nil [22535 22833]) ("definterface" code nil nil [22835 22903]) ("definterface" code nil nil [22905 23015]) ("definterface" code nil nil [23017 23264]) ("definterface" code nil nil [23266 23521]) ("definterface" code nil nil [23523 23704]) ("definterface" code nil nil [23706 23889]) ("definterface" code nil nil [23891 24309]) ("definterface" code nil nil [24311 24670]) ("definterface" code nil nil [24672 24816]) ("definterface" code nil nil [24818 24940]) ("definterface" code nil nil [24942 25169]) ("definterface" code nil nil [25171 25267]) ("definterface" code nil nil [25269 25367]) ("definterface" code nil nil [25369 25478]) ("definterface" code nil nil [25482 25660]) ("definterface" code nil nil [25662 25741]) ("definterface" code nil nil [25743 25826]) ("definterface" code nil nil [25828 25946]) (":location" type (:members ("buffer" "position" "hints") :type "struct") nil [25975 26378]) (":error" type (:members ("message") :type "struct") nil [26380 26443]) (":file" type (:members ("name") :type "struct") nil [26444 26503]) (":buffer" type (:members ("name") :type "struct") nil [26504 26565]) (":position" type (:members ("pos") :type "struct") nil [26566 26628]) ("definterface" code nil nil [26630 26948]) ("definterface" code nil nil [26950 27099]) ("definterface" code nil nil [27114 27255]) ("definterface" code nil nil [27257 27398]) ("definterface" code nil nil [27400 27569]) ("definterface" code nil nil [27571 27730]) ("definterface" code nil nil [27732 27888]) ("definterface" code nil nil [27890 28053]) ("definterface" code nil nil [28055 28220]) ("definterface" code nil nil [28245 28627]) ("definterface" code nil nil [28629 28776]) ("definterface" code nil nil [28863 28931]) ("definterface" code nil nil [28933 29011]) ("definterface" code nil nil [29013 29085]) ("definterface" code nil nil [29087 29232]) ("definterface" code nil nil [29234 29293]) ("definterface" code nil nil [29295 29355]) ("definterface" code nil nil [29357 29865]) ("inspector" type (:typemodifiers (":documentation") :type "class") nil [29885 30060]) ("backend-inspector" type (:superclasses "inspector" :type "class") nil [30062 30105]) ("definterface" code nil nil [30107 30221]) ("inspect-for-emacs" function (:arguments ("inspector")) nil [30223 31239]) ("inspect-for-emacs" function (:parent "t" :arguments ("object" "inspector")) nil [31241 31711]) ("label-value-line" function (:arguments ("label" "value" "&key" "newline")) nil [31755 32041]) ("label-value-line*" function (:arguments ("&rest" "label-values")) nil [32043 32210]) ("definterface" code nil nil [32212 32356]) ("definterface" code nil nil [32477 32701]) ("definterface" code nil nil [32703 32774]) ("definterface" code nil nil [32776 32972]) ("definterface" code nil nil [32974 33137]) ("definterface" code nil nil [33139 33364]) ("definterface" code nil nil [33366 33486]) ("definterface" code nil nil [33488 33681]) ("definterface" code nil nil [33683 33877]) ("definterface" code nil nil [33879 34130]) ("definterface" code nil nil [34132 34660]) ("definterface" code nil nil [34662 34741]) ("definterface" code nil nil [34743 34806]) ("definterface" code nil nil [34808 34913]) ("definterface" code nil nil [34915 34990]) ("definterface" code nil nil [34992 35078]) ("definterface" code nil nil [35080 35149]) ("definterface" code nil nil [35151 35235]) ("definterface" code nil nil [35237 35673]) ("definterface" code nil nil [35703 35840]) ("definterface" code nil nil [35842 35983]) ("definterface" code nil nil [35985 36134]) ("definterface" code nil nil [36160 36505]) ("defparameter" code nil nil [36508 38182]))
    :file "swank-backend.lisp"
    :pointmax 38183
    )
   (semanticdb-table "metering.lisp"
    :major-mode 'lisp-mode
    :tags '(("or" code nil nil [17898 17916]) ("warn" code nil nil [17917 17982]) ("defpackage" code nil nil [18128 18496]) ("in-package" code nil nil [18497 18519]) ("eval-when" code nil nil [18596 18688]) ("defparameter" code nil nil [18802 18898]) ("or" code nil nil [19392 19410]) ("eval-when" code nil nil [19411 19518]) ("defconstant" code nil nil [19520 19586]) ("get-time" function nil nil [19588 19653]) ("get-cons" function nil nil [20689 20904]) ("get-cons" function nil nil [21456 21527]) ("or" code nil nil [22325 22343]) ("progn" code nil nil [22344 22521]) ("with-time/cons" function (:arguments ("delta-time" "form" "&body" "post-process")) nil [22647 23145]) ("progn" code nil nil [23155 25261]) ("required-arguments" function (:arguments ("name")) nil [26422 26692]) ("or" code nil nil [26696 26714]) ("progn" code nil nil [26715 26951]) ("*MONITOR-TIME-OVERHEAD*" variable nil nil [27593 27687]) ("*MONITOR-CONS-OVERHEAD*" variable nil nil [27688 27782]) ("*TOTAL-TIME*" variable nil nil [27784 27850]) ("*TOTAL-CONS*" variable nil nil [27851 27920]) ("*TOTAL-CALLS*" variable nil nil [27921 27989]) ("proclaim" code nil nil [27990 28031]) ("proclaim" code nil nil [28032 28076]) ("proclaim" code nil nil [28077 28111]) ("PLACE-FUNCTION" function (:arguments ("function-place")) nil [28319 28893]) ("defsetf" code nil nil [28895 29392]) ("PLACE-MACROP" function (:arguments ("function-place")) nil [30322 30475]) ("*monitored-functions*" variable nil nil [30588 30653]) ("metering-functions" type (:members ("name" "old-definition" "new-definition" "read-metering" "reset-metering") :type "struct") nil [30867 31062]) ("*monitor*" variable (:default-value (make-hash-table :test (function equal))) nil [31688 31804]) ("get-monitor-info" function (:arguments ("name")) nil [31805 31863]) ("defsetf" code nil nil [31864 31946]) ("MONITORED" function (:arguments ("function-place")) nil [31948 32137]) ("reset-monitoring-info" function (:arguments ("name")) nil [32139 32350]) ("reset-all-monitoring" function nil nil [32351 32607]) ("monitor-info-values" function (:arguments ("name" "&optional" "nested" "warn")) nil [32609 34492]) ("eval-when" code nil nil [34605 39016]) ("eval-when" code nil nil [39444 39516]) ("*existing-encapsulations*" variable (:default-value (make-hash-table :test (function equal))) nil [39518 39584]) ("find-encapsulation" function (:arguments ("min-args" "optionals-p")) nil [39585 39882]) ("macrolet" code nil nil [39884 40383]) ("monitoring-encapsulate" function (:arguments ("name" "&optional" "warn")) nil [40385 41291]) ("monitoring-unencapsulate" function (:arguments ("name" "&optional" "warn")) nil [41293 41953]) ("MONITOR" function (:arguments ("&rest" "names")) nil [42066 42539]) ("UNMONITOR" function (:arguments ("&rest" "names")) nil [42541 42802]) ("MONITOR-ALL" function (:arguments ("&optional" "package")) nil [42804 43120]) ("MONITOR-FORM" function (:arguments ("form" "&optional" "nested" "threshold" "key")) nil [43122 43659]) ("WITH-MONITORING" function (:arguments ("&rest" "&optional" "&body" "body")) nil [43661 44221]) ("defconstant" code nil nil [44334 44441]) ("STUB-FUNCTION" function (:arguments ("x")) nil [44515 44569]) ("proclaim" code nil nil [44570 44607]) ("SET-MONITOR-OVERHEAD" function nil nil [44609 45431]) ("set-monitor-overhead" code nil nil [45432 45454]) ("*monitor-results*" variable nil nil [45567 45650]) ("*no-calls*" variable nil nil [45651 45730]) ("*estimated-total-overhead*" variable nil nil [45731 45768]) ("monitoring-info" type (:members ("name" "calls" "time" "cons" "percent-time" "percent-cons" "time-per-call" "cons-per-call") :type "struct") nil [45829 46197]) ("REPORT" function (:arguments ("&key" "names" "nested" "threshold" "sort-key" "ignore-no-calls")) nil [46199 46656]) ("REPORT-MONITORING" function (:arguments ("&optional" "names" "nested" "threshold" "key" "ignore-no-calls")) nil [46658 49364]) ("display-monitoring-results" function (:arguments ("&optional" "threshold" "key" "ignore-no-calls")) nil [49366 52366]) ("sort-results" function (:arguments ("&optional" "key")) nil [52368 53217]))
    :file "metering.lisp"
    :pointmax 53239
    )
   (semanticdb-table "nregex.lisp"
    :major-mode 'lisp-mode
    :tags '(("in-package" code nil nil [969 990]) ("defpackage" code nil nil [1102 1196]) ("in-package" code nil nil [1218 1244]) ("eval-when" code nil nil [1311 1430]) ("info" function (:arguments ("message" "&rest" "args")) nil [1432 1539]) ("*regex-groups*" variable (:default-value (make-array 10)) nil [1616 1655]) ("*regex-groupings*" variable nil nil [1656 1684]) ("regex" function (:arguments ("expression" "string")) nil [1832 2540]) ("*regex-special-chars*" variable (:default-value "?*+.()[]\\${}") nil [2613 2659]) ("add-exp" function (:arguments ("list")) nil [2661 2774]))
    :file "nregex.lisp"
    :pointmax 20209
    )
   (semanticdb-table "swank-allegro.lisp"
    :major-mode 'lisp-mode
    :tags '(("in-package" code nil nil [269 296]) ("eval-when" code nil nil [298 392]) ("import-from" code nil nil [394 450]) ("import-swank-mop-symbols" code nil nil [467 533]) ("swank-mop:slot-definition-documentation" function (:arguments ("slot")) nil [535 614]) ("defimplementation" code nil nil [635 696]) ("defimplementation" code nil nil [698 858]) ("defimplementation" code nil nil [860 928]) ("defimplementation" code nil nil [930 988]) ("defimplementation" code nil nil [990 1304]) ("*external-format-to-coding-system*" variable (:default-value (quote ((:iso-8859-1 "latin-1" "latin-1-unix" "iso-latin-1-unix" "iso-8859-1" "iso-8859-1-unix") (:utf-8 "utf-8" "utf-8-unix") (:euc-jp "euc-jp" "euc-jp-unix") (:us-ascii "us-ascii" "us-ascii-unix") (:emacs-mule "emacs-mule" "emacs-mule-unix")))) nil [1306 1618]) ("defimplementation" code nil nil [1620 1947]) ("defimplementation" code nil nil [1949 2016]) ("defimplementation" code nil nil [2018 2080]) ("defimplementation" code nil nil [2101 2190]) ("defimplementation" code nil nil [2192 2238]) ("defimplementation" code nil nil [2240 2304]) ("defimplementation" code nil nil [2306 2503]) ("defimplementation" code nil nil [2505 2585]) ("defimplementation" code nil nil [2598 2710]) ("defimplementation" code nil nil [2712 2774]) ("defimplementation" code nil nil [2776 3382]) ("defimplementation" code nil nil [3384 3628]) ("defimplementation" code nil nil [3630 3723]) ("*sldb-topframe*" variable nil nil [3740 3764]) ("defimplementation" code nil nil [3766 3944]) ("defimplementation" code nil nil [3946 4424]) ("find-topframe" function nil nil [4426 4583]) ("next-frame" function (:arguments ("frame")) nil [4585 4772]) ("nth-frame" function (:arguments ("index")) nil [4774 4899]) ("defimplementation" code nil nil [4901 5107]) ("defimplementation" code nil nil [5109 5204]) ("defimplementation" code nil nil [5206 5459]) ("defimplementation" code nil nil [5461 5585]) ("defimplementation" code nil nil [5595 5672]) ("defimplementation" code nil nil [5674 5779]) ("defimplementation" code nil nil [5781 6013]) ("defimplementation" code nil nil [6015 6512]) ("defimplementation" code nil nil [6514 6780]) ("defimplementation" code nil nil [6782 7098]) ("*buffer-name*" variable nil nil [7121 7147]) ("*buffer-start-position*" variable nil nil [7148 7180]) ("*buffer-string*" variable nil nil [7181 7205]) ("*compile-filename*" variable nil nil [7206 7237]) ("compiler-note-p" function (:arguments ("object")) nil [7239 7346]) ("compiler-undefined-functions-called-warning-p" function (:arguments ("object")) nil [7348 7477]) ("deftype" code nil nil [7479 7536]) ("signal-compiler-condition" function (:arguments ("&rest" "args")) nil [7538 7645]) ("handle-compiler-warning" function (:arguments ("condition")) nil [7647 8225]) ("location-for-warning" function (:arguments ("condition")) nil [8227 8740]) ("handle-undefined-functions-warning" function (:arguments ("condition")) nil [8742 9332]) ("defimplementation" code nil nil [9334 9549]) ("defimplementation" code nil nil [9551 9845]) ("call-with-temp-file" function (:arguments ("fn")) nil [9847 10092]) ("compile-from-temp-file" function (:arguments ("string")) nil [10094 10635]) ("defimplementation" code nil nil [10637 11525]) ("fspec-primary-name" function (:arguments ("fspec")) nil [11552 11672]) ("find-definition-in-file" function (:arguments ("fspec" "type" "file" "top-level")) nil [12353 13103]) ("find-fspec-location" function (:arguments ("fspec" "type" "file" "top-level")) nil [13334 13663]) ("fspec->string" function (:arguments ("fspec")) nil [13665 14008]) ("fspec-definition-locations" function (:arguments ("fspec")) nil [14010 14959]) ("defimplementation" code nil nil [14961 15044]) ("defxref" function (:arguments ("name" "relation" "name1" "name2")) nil [15057 15198]) ("defxref" code nil nil [15200 15247]) ("defxref" code nil nil [15248 15295]) ("defxref" code nil nil [15296 15343]) ("defxref" code nil nil [15344 15391]) ("defxref" code nil nil [15392 15439]) ("defxref" code nil nil [15440 15487]) ("xref-result" function (:arguments ("fspecs")) nil [15489 15596]) ("map-function-constants" function (:arguments ("function" "fn" "depth")) nil [15860 16322]) ("in-constants-p" function (:arguments ("fun" "symbol")) nil [16324 16570]) ("function-callers" function (:arguments ("name")) nil [16573 16806]) ("defimplementation" code nil nil [16808 16887]) ("defimplementation" code nil nil [16889 17192]) ("*profiled-functions*" variable nil nil [17363 17395]) ("*profile-depth*" variable nil nil [17396 17422]) ("with-redirected-y-or-n-p" function (:arguments ("&body" "body")) nil [17424 18359]) ("start-acl-profiler" function nil nil [18361 18530]) ("acl-profiler-active-p" function nil nil [18531 18622]) ("stop-acl-profiler" function nil nil [18624 18688]) ("excl:def-fwrapper" code nil nil [18690 19129]) ("defimplementation" code nil nil [19131 19319]) ("defimplementation" code nil nil [19321 19385]) ("defimplementation" code nil nil [19387 19531]) ("defimplementation" code nil nil [19533 19665]) ("defimplementation" code nil nil [19667 19815]) ("acl-inspector" type (:superclasses "backend-inspector" :type "class") nil [19834 19881]) ("defimplementation" code nil nil [19883 19961]) ("inspect-for-emacs" function (:parent "function" :arguments ("f" "inspector")) nil [19963 20349]) ("inspect-for-emacs" function (:parent "t" :arguments ("o" "inspector")) nil [20351 20472]) ("inspect-for-emacs" function (:parent "function" :arguments ("o" "inspector")) nil [20474 20605]) ("inspect-for-emacs" function (:parent "standard-object" :arguments ("o" "inspector")) nil [20607 20804]) ("allegro-inspect" function (:arguments ("o")) nil [20806 20949]) ("frob-allegro-field-def" function (:arguments ("object" "def")) nil [20951 21695]) ("defimplementation" code nil nil [21718 21827]) ("defimplementation" code nil nil [21829 21905]) ("*id-lock*" variable (:default-value (mp:make-process-lock :name "id lock")) nil [21907 21964]) ("*thread-id-counter*" variable nil nil [21965 21995]) ("defimplementation" code nil nil [21997 22227]) ("defimplementation" code nil nil [22229 22362]) ("defimplementation" code nil nil [22364 22431]) ("defimplementation" code nil nil [22433 22566]) ("defimplementation" code nil nil [22568 22645]) ("defimplementation" code nil nil [22647 22753]) ("defimplementation" code nil nil [22755 22815]) ("defimplementation" code nil nil [22817 22884]) ("defimplementation" code nil nil [22886 22969]) ("defimplementation" code nil nil [22971 23038]) ("*mailbox-lock*" variable (:default-value (mp:make-process-lock :name "mailbox lock")) nil [23040 23107]) ("mailbox" type (:members ("mutex" "queue") :type "struct") nil [23109 23235]) ("mailbox" function (:arguments ("thread")) nil [23237 23485]) ("defimplementation" code nil nil [23487 23898]) ("defimplementation" code nil nil [23900 24138]) ("defimplementation" code nil nil [24140 24197]) ("defimplementation" code nil nil [24488 24933]) ("tracedp" function (:arguments ("fspec")) nil [24935 25005]) ("toggle-trace-aux" function (:arguments ("fspec" "&rest" "args")) nil [25007 25262]) ("toggle-trace-generic-function-methods" function (:arguments ("name")) nil [25264 25764]) ("process-fspec-for-allegro" function (:arguments ("fspec")) nil [25766 26245]) ("defimplementation" code nil nil [26271 26374]) ("defimplementation" code nil nil [26376 26482]) ("defimplementation" code nil nil [26484 26652]) ("defimplementation" code nil nil [26679 26888]))
    :file "swank-allegro.lisp"
    :pointmax 26889
    )
   (semanticdb-table "hyperspec.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("cl" include nil nil [1367 1380]) ("browse-url" include nil nil [1381 1402]) ("thingatpt" include nil nil [1452 1472]) ("common-lisp-hyperspec-root" variable (:default-value "http://www.lispworks.com/reference/HyperSpec/") nil [1474 1726]) ("common-lisp-hyperspec-symbol-table" variable nil nil [1817 2062]) ("common-lisp-hyperspec-history" variable nil nil [2064 2169]) ("common-lisp-hyperspec-symbols" variable (:default-value (make-vector 67 0)) nil [2240 2297]) ("common-lisp-hyperspec-strip-cl-package" function (:arguments ("name")) nil [2299 2603]) ("common-lisp-hyperspec" function (:user-visible-flag t :arguments ("symbol-name")) nil [2605 4690]) ("eval-when" code nil nil [4846 4923]) ("if" code nil nil [5140 48267]) ("common-lisp-hyperspec-format-history" variable nil nil [48420 48542]) ("common-lisp-hyperspec-format-characters" variable (:default-value (make-vector 67 0)) nil [48544 48611]) ("common-lisp-hyperspec-section-6.0" function (:arguments ("indices")) nil [48614 48959]) ("common-lisp-hyperspec-section-4.0" function (:arguments ("indices")) nil [48961 49206]) ("common-lisp-hyperspec-section-fun" variable (:default-value (quote common-lisp-hyperspec-section-6\.0)) nil [49208 49285]) ("common-lisp-hyperspec-section" function (:arguments ("indices")) nil [49287 49388]) ("common-lisp-hyperspec-format" function (:arguments ("character-name")) nil [49390 50249]) ("eval-when" code nil nil [50251 50342]) ("mapcar" code nil nil [50344 53321]) ("common-lisp-glossary-fun" variable (:default-value (quote common-lisp-glossary-6\.0)) nil [53323 53382]) ("common-lisp-glossary-6.0" function (:arguments ("string")) nil [53384 53657]) ("common-lisp-glossary-4.0" function (:arguments ("string")) nil [53659 53930]) ("common-lisp-hyperspec-issuex-table" variable nil nil [53932 54199]) ("common-lisp-hyperspec-issuex-symbols" variable (:default-value (make-vector 67 0)) nil [54201 54265]) ("if" code nil nil [54267 75425]) ("common-lisp-issuex" function (:arguments ("issue-name")) nil [75427 75628]) ("hyperspec" package nil nil [75630 75650]))
    :file "hyperspec.el"
    :pointmax 75679
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0pre3"
  :semanticdb-version "2.0pre3"
  )
