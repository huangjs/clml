;; Object iterate/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "iterate/"
  :tables (list 
   (semanticdb-table "iterate.lisp"
    :major-mode 'lisp-mode
    :tags '(("in-package" code nil nil [5259 5281]) ("declaim" code nil nil [5283 5324]) ("version" variable (:constant-flag t :default-value "1.4") nil [5427 5480]) ("standard-type-symbols" variable (:constant-flag t :default-value (quote (array atom bignum bit bit-vector boolean character compiled-function complex cons double-float fixnum float function hash-table integer keyword list long-float nil null number package pathname random-state ratio rational readtable real sequence short-float signed-byte simple-array simple-bit-vector simple-string simple-vector single-float standard-char stream string string-char symbol t unsigned-byte vector))) nil [5484 6004]) ("smallest-number-alist" variable (:constant-flag t :default-value (\` ((fixnum \, most-negative-fixnum) (float \, most-negative-long-float) (long-float \, most-negative-long-float) (short-float \, most-negative-short-float) (double-float \, most-negative-double-float) (single-float \, most-negative-single-float)))) nil [6086 6386]) ("largest-number-alist" variable (:constant-flag t :default-value (\` ((fixnum \, most-positive-fixnum) (float \, most-positive-long-float) (long-float \, most-positive-long-float) (short-float \, most-positive-short-float) (double-float \, most-positive-double-float) (single-float \, most-positive-single-float)))) nil [6404 6703]) ("*always-declare-variables*" variable nil nil [6755 6794]) ("*result-var*" variable nil nil [7064 7085]) ("*type-alist*" variable nil nil [7355 7376]) ("*declare-variables*" variable nil nil [7751 7779]) ("*clause*" variable nil nil [7915 7932]) ("*top-level?*" variable nil nil [8199 8220]) ("*binding-context?*" variable nil nil [8515 8542]) ("*bindings*" variable nil nil [8671 8690]) ("*internal-variables*" variable nil nil [9044 9073]) ("*declarations*" variable nil nil [9233 9256]) ("*accum-var-alist*" variable nil nil [9791 9817]) ("*shared-bindings-alist*" variable nil nil [9973 10005]) ("*block-name*" variable nil nil [10096 10117]) ("*clause-info-index*" variable (:default-value (list :index)) nil [10338 10380]) ("eval-when" code nil nil [10382 10649]) ("*special-clause-alist*" variable nil nil [13498 13533]) ("*temps*" variable nil nil [14180 14196]) ("*temps-in-use*" variable nil nil [14197 14220]) ("*env*" variable nil nil [14269 14283]) ("*driver-info-alist*" variable nil nil [14371 14399]) ("*previous-vars-alist*" variable nil nil [14446 14476]) ("*loop-top*" variable nil nil [14496 14515]) ("*loop-step*" variable nil nil [14516 14536]) ("*loop-end*" variable nil nil [14537 14556]) ("*loop-step-used?*" variable nil nil [14697 14723]) ("*loop-end-used?*" variable nil nil [14724 14749]) ("*loop-body-wrappers*" variable nil nil [14802 14831]) ("eval-when" code nil nil [14901 15490]) ("iterate" function (:arguments ("&body" "body")) nil [18928 19029]) ("iter" function (:arguments ("&body" "body" "&environment" "env")) nil [19031 20967]) ("defmacro-clause" function (:arguments ("clause-template" "&body" "body")) nil [20969 21113]) ("defmacro-driver" function (:arguments ("clause-template" "&body" "body")) nil [21115 21279]) ("process-top-level-decls" function (:arguments ("clauses")) nil [21299 22122]) ("default-driver-code" function nil nil [22125 22161]) ("wrap-form" function (:arguments ("wrappers" "form")) nil [22163 22349]) ("add-loop-body-wrapper" function (:arguments ("wrapper")) nil [22351 22429]) ("walk-list" function (:arguments ("forms")) nil [26020 26081]) ("walk-fspec" function (:arguments ("form")) nil [26250 26815]) ("return-code-modifying-body" function (:arguments ("f" "stuff" "mod-f")) nil [27376 27602]) ("add-internal-var" function (:arguments ("var")) nil [27605 27745]) ("add-internal-vars" function (:arguments ("vars")) nil [27747 27941]) ("lambda-list-vars" function (:arguments ("lambda-list")) nil [27943 28333]) ("special-form?" function (:arguments ("symbol")) nil [28436 28642]) ("walk-special-form" function (:arguments ("form")) nil [28644 28843]) ("walk-identity" function (:arguments ("&rest" "stuff")) nil [28851 28901]) ("walk-setq" function (:arguments ("setq" "&rest" "things")) nil [29735 30363]) ("walk-let" function (:arguments ("let" "bindings" "&rest" "body")) nil [31156 32125]) ("walk-let*-bindings" function (:arguments ("bindings")) nil [32294 32871]) ("walk-let-binding" function (:arguments ("binding")) nil [32880 33120]) ("walk-multiple-value-bind" function (:arguments ("mvb" "vars" "expr" "&rest" "body")) nil [33126 33883]) ("walk-macrolet" function (:arguments ("form-name" "&rest" "stuff")) nil [36033 36262]) ("walk-cond" function (:arguments ("cond" "&rest" "stuff")) nil [36274 36928]) ("*initial*" variable nil nil [37052 37070]) ("*decls*" variable nil nil [37071 37087]) ("*step*" variable nil nil [37088 37103]) ("*final*" variable nil nil [37104 37120]) ("*finalp*" variable nil nil [37121 37138]) ("process-clause" function (:arguments ("clause")) nil [37140 37988]) ("apply-clause-function" function (:arguments ("func" "args")) nil [37990 38402]) ("preprocess-clause" function (:arguments ("clause")) nil [38406 39220]) ("symbol-synonym" function (:arguments ("symbol")) nil [39223 39290]) ("eval-when" code nil nil [39293 39469]) ("arg-check" function (:arguments ("clause" "info")) nil [39485 39990]) ("walk-expr" function (:arguments ("expr")) nil [39992 40500]) ("display-iterate-clauses" function (:arguments ("&optional" "clause-spec")) nil [40607 41263]) ("disp-std-clauses" function (:arguments ("clause-spec" "index")) nil [41265 41565]) ("display-clause" function (:arguments ("kws" "doc-string")) nil [41569 41703]) ("fill-col" variable (:constant-flag t :default-value 77) nil [41706 41728]) ("display-kws" function (:arguments ("kws")) nil [41730 42238]) ("clause-matches?" function (:arguments ("clause-spec" "kws")) nil [42247 42349]) ("get-clause-info" function (:arguments ("clause" "&optional" "index")) nil [43265 43589]) ("is-iterate-clause?" function (:arguments ("form")) nil [43598 43715]) ("starts-clause?" function (:arguments ("symbol")) nil [43718 44197]) ("eval-when" code nil nil [44288 47847]) ("display-index" function (:arguments ("&optional" "index" "indent")) nil [47865 48166]) ("defclause" function (:arguments ("clause-template" "&body" "body")) nil [49442 49541]) ("defclause-driver" function (:arguments ("clause-template" "&body" "body")) nil [49543 49647]) ("eval-when" code nil nil [49994 55091]) ("defsynonym" function (:arguments ("syn" "word")) nil [55115 55309]) ("defclause-sequence" function (:arguments ("element-name" "index-name" "&key" "access-fn" "size-fn" "element-type" "sequence-type" "element-doc-string" "index-doc-string")) nil [55313 56598]) ("if-1st-time" function (:arguments ("then" "&optional" "else" "first-time-var")) nil [56608 57111]) ("with-temporaries" function (:arguments ("n" "vlist" "&body" "body")) nil [57438 57731]) ("var-type" function (:arguments ("var")) nil [58016 58114]) ("var-declaration" function (:arguments ("var")) nil [58116 58189]) ("expr-type-only" function (:arguments ("expr")) nil [58191 58753]) ("expression-type" function (:arguments ("form")) nil [58755 58857]) ("quoted?" function (:arguments ("x")) nil [58859 58964]) ("function-quoted?" function (:arguments ("x")) nil [58966 59104]) ("lambda-expression?" function (:arguments ("x")) nil [59106 59175]) ("the-expression?" function (:arguments ("x")) nil [59177 59242]) ("self-evaluating?" function (:arguments ("x")) nil [59244 59579]) ("constant?" function (:arguments ("x")) nil [59581 59957]) ("duplicable?" function (:arguments ("x")) nil [59959 60219]) ("var-spec?" function (:arguments ("x")) nil [60352 60412]) ("extract-var" function (:arguments ("var-spec")) nil [60414 60516]) ("make-binding" function (:arguments ("var" "value" "&key" "type" "using-type-of")) nil [61035 61619]) ("make-default-binding" function (:arguments ("var" "&key" "type" "using-type-of")) nil [61621 62105]) ("make-var-and-binding" function (:arguments ("string" "value" "&key" "type" "using-type-of")) nil [62107 62273]) ("make-var-and-default-binding" function (:arguments ("string" "&key" "type" "using-type-of")) nil [62275 62443]) ("make-accum-var-binding" function (:arguments ("var" "value" "kind" "&key" "type" "using-type-of")) nil [62445 62588]) ("make-accum-var-default-binding" function (:arguments ("var" "kind" "&key" "type" "using-type-of")) nil [62590 62735]) ("make-accum-var-binding-internal" function (:arguments ("var" "value" "value-supplied?" "kind" "type" "using-type-of")) nil [62737 64367]) ("make-shared-binding" function (:arguments ("var" "value" "&key" "type" "using-type-of")) nil [64369 64839]) ("make-binding-internal" function (:arguments ("var-spec" "value" "value-supplied?" "use-type" "using-type-of")) nil [64841 66958]) ("make-initial-value" function (:arguments ("value" "value-supplied?" "type")) nil [66961 67989]) ("add-binding" function (:arguments ("var" "value")) nil [67991 68183]) ("check-internal-variables" function (:arguments ("var")) nil [68185 68447]) ("internal-variable?" function (:arguments ("var")) nil [68449 68528]) ("var-binding" function (:arguments ("var")) nil [68642 68721]) ("make-destructuring-bindings" function (:arguments ("template" "value" "&key" "type" "using-type-of")) nil [69062 69682]) ("do-destructuring-bindings" function (:arguments ("template" "value")) nil [69685 70154]) ("extract-vars" function (:arguments ("template")) nil [70156 70637]) ("dsetq" function (:arguments ("template" "value")) nil [70684 71110]) ("do-dsetq" function (:arguments ("template" "value" "&optional" "bindings?" "type")) nil [71115 71961]) ("make-dsetqs" function (:arguments ("template" "value" "bindings?")) nil [71963 72474]) ("dsetq-error" function (:arguments ("format-string" "&rest" "args")) nil [73498 73686]) ("in-iterate?" function nil nil [73688 73735]) ("local-binding-check" function (:arguments ("form")) nil [73824 74304]) ("free-variables" function (:arguments ("form")) nil [74307 74602]) ("free-vars-fspec" function (:arguments ("fspec" "bound-vars")) nil [76907 77181]) ("return-code" function (:arguments ("&key" "declarations" "initial" "body" "step" "final" "final-protected")) nil [77297 77440]) ("return-driver-code" function (:arguments ("&key" "variable" "initial" "declarations" "body" "step" "final" "final-protected" "next")) nil [77442 77879]) ("add-driver-info" function (:arguments ("var-template" "next-code" "generator?")) nil [77881 78297]) ("return-sequence-code" function (:arguments ("&key" "element-var" "sequence" "access-fn" "size-fn" "element-type" "sequence-type")) nil [78299 78845]) ("return-seq-code" function (:arguments ("&key" "element-var" "sequence" "access-fn" "size-fn" "element-type" "sequence-type" "from" "upfrom" "to" "downto" "above" "below" "downfrom" "with-index" "by" "generate")) nil [78847 81232]) ("check-sequence-keywords" function (:arguments ("from" "upfrom" "downfrom" "to" "downto" "above" "below" "known-limits?" "&aux" "count")) nil [81234 82097]) ("eval-const-expr" function (:arguments ("expr")) nil [82099 82347]) ("apply-subst-expr" function (:arguments ("subst-expr" "args")) nil [83260 83418]) ("def-special-clause" function (:arguments ("name" "arglist" "&body" "body")) nil [83828 84031]) ("install-special-clause-function" function (:arguments ("symbol" "&optional" "doc-string")) nil [84033 84336]) ("def-special-clause" code nil nil [84360 84529]) ("def-special-clause" code nil nil [84554 84723]) ("def-special-clause" code nil nil [84742 85052]) ("def-special-clause" code nil nil [85074 85236]) ("def-special-clause" code nil nil [85268 85460]) ("def-special-clause" code nil nil [85502 85753]) ("def-special-clause" code nil nil [85774 85901]) ("def-special-clause" code nil nil [85927 86469]) ("def-special-clause" code nil nil [86486 86712]) ("def-special-clause" code nil nil [86729 88031]) ("make-next-code" function (:arguments ("var" "code" "n")) nil [88034 88572]) ("var-value-returned" function (:arguments ("forms")) nil [88575 89073]) ("defsynonym" code nil nil [89187 89206]) ("defsynonym" code nil nil [89208 89240]) ("defclause" code nil nil [89242 89622]) ("defclause-driver" code nil nil [89645 91050]) ("defclause-driver" code nil nil [91127 91648]) ("defclause-driver" code nil nil [91676 92127]) ("generate-function-step-code" function (:arguments ("var" "step")) nil [92130 92746]) ("defclause-sequence" code nil nil [92779 93009]) ("defclause-sequence" code nil nil [93033 93334]) ("defclause-sequence" code nil nil [93356 93581]) ("defclause-driver" code nil nil [93683 94417]) ("defclause-driver" code nil nil [94465 95543]) ("defmacro-driver" code nil nil [95590 95834]) ("defclause-driver" code nil nil [95870 96053]) ("defclause-driver" code nil nil [96091 96310]) ("return-stream-driver-code" function (:arguments ("var" "thing" "reader" "stream-or-file" "generate")) nil [96312 97424]) ("defclause-driver" code nil nil [97446 97622]) ("defclause-driver" code nil nil [97644 98119]) ("defclause" code nil nil [99202 99538]) ("defclause" code nil nil [99585 100105]) ("defclause" code nil nil [100119 100417]) ("defclause" code nil nil [100441 100960]) ("return-reduction-code" function (:arguments ("&key" "identity" "operation" "external-op?" "variable" "expression" "test" "type" "using-type-of" "accum-kind")) nil [101058 102348]) ("defsynonym" code nil nil [102350 102377]) ("defclause" code nil nil [102409 102685]) ("defclause" code nil nil [102712 102931]) ("defsynonym" code nil nil [102933 102957]) ("defclause" code nil nil [102989 103218]) ("defsynonym" code nil nil [103220 103253]) ("defclause" code nil nil [103303 104573]) ("defclause" code nil nil [104685 104806]) ("defsynonym" code nil nil [104808 104840]) ("defclause" code nil nil [104872 104993]) ("defsynonym" code nil nil [104995 105027]) ("return-extremum-code" function (:arguments ("expr" "var-spec" "operation")) nil [105030 106191]) ("finish" function nil nil [106306 106428]) ("terminate" function nil nil [106446 106581]) ("next-iteration" function nil nil [106604 106711]) ("leave" function (:arguments ("&optional" "value")) nil [106735 106859]) ("defclause" code nil nil [106873 107025]) ("defclause" code nil nil [107039 107189]) ("defclause" code nil nil [107426 107737]) ("defclause" code nil nil [107751 108083]) ("defclause" code nil nil [108100 108409]) ("defclause" code nil nil [108555 109454]) ("defclause" code nil nil [109496 109668]) ("defclause" code nil nil [109710 109882]) ("return-find-extremum-code" function (:arguments ("expr" "m-expr" "var" "kind")) nil [109884 112333]) ("return-collection-code" function (:arguments ("&key" "variable" "expression" "start-operation" "end-operation" "one-element" "test" "place" "result-type")) nil [112428 115244]) ("defclause" code nil nil [115291 115609]) ("defsynonym" code nil nil [115611 115642]) ("defclause" code nil nil [115695 116674]) ("defclause" code nil nil [116711 116922]) ("defclause" code nil nil [116961 117230]) ("defclause" code nil nil [118428 119137]) ("defsynonym" code nil nil [119139 119175]) ("register-previous-code" function (:arguments ("vars" "code" "class")) nil [121024 121343]) ("intern-previous-info" function (:arguments ("var")) nil [121345 122019]) ("is-save-var" function (:arguments ("var" "entry")) nil [122021 122139]) ("make-save-vars" function (:arguments ("var" "n")) nil [122141 122355]) ("do-extra-save-var-hack" function (:arguments ("var" "save-info-list" "code-list")) nil [125038 125519]) ("make-post-save-var" function (:arguments ("var")) nil [125524 125646]) ("make-prev-code" function (:arguments ("set-var" "s-i" "&optional" "class")) nil [125649 125863]) ("make-save-previous-code" function (:arguments ("var" "save-vars")) nil [125865 126137]) ("splice-in-code" function (:arguments ("prev-code" "post-code" "code-list")) nil [126139 127174]) ("add-progn" function (:arguments ("forms")) nil [127176 127407]) ("at-top-level?" function nil nil [127519 127558]) ("top-level-check" function nil nil [127560 127670]) ("prognify" function (:arguments ("forms")) nil [127672 127943]) ("clause-error" function (:arguments ("format-string" "&rest" "args")) nil [127945 128125]) ("clause-warning" function (:arguments ("format-string" "&rest" "args")) nil [128127 128347]) ("bug" function (:arguments ("format-string" "&rest" "args")) nil [128350 128489]) ("*genvar-counter*" variable nil nil [128558 128585]) ("genvar" function (:arguments ("&optional" "string")) nil [128587 128723]) ("symbol-append" function (:arguments ("&rest" "syms")) nil [128730 128833]))
    :file "iterate.lisp"
    :pointmax 129795
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0pre3"
  :semanticdb-version "2.0pre3"
  )
